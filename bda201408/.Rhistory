library(help = "arm")
data(library = 'arm')
library(help = 'arm')
library(data.table)
fread("~/misc/books_code/gelman_arm/ARM_Data/radon/cty.dat")
cty.dt <- fread("~/misc/books_code/gelman_arm/ARM_Data/radon/cty.dat")
srrs2.dt <- fread("~/misc/books_code/gelman_arm/ARM_Data/radon/srrs2.dat")
srrs2.dt
srrs2.dt[state == 'MN']
str(srrs2.dt)
srrs2.dt[, unique(state)]
lsos()
rm(srrs2.dt, cty.dt)
lsos()
ls()
fread("radon.txt")
fread("radon.txt")[state == "MN"]
radon.dt <- fread("radon.txt")
cty.dt <- fread("cty.txt")
cty.dt
merge(radon.dt, cty.dt, by = c("stfips", "ctfips"))
cty.dt
radon.dt
radon.dt[, unique(paste(state, stfips))]
radon.dt[, keyid := cntyfips]
cty.dt
cty.dt[, keyid := ctfips]
merge(radon.dt, cty.dt, by = 'keyid')
merge(cty.dt, radon.dt, by = 'keyid')
radon.dt
radon.dt[, unique(keyid)]
cty.dt[, unique(keyid)]
cty.dt
cty.dt[st == "MN"]
radon.dt
radon.dt[state == "MN"]
radon.dt[state == "MN", unique(county)]
cty.dt
cty.dt[st == "MN", unique(cty)]
merge(cty.dt, radon.dt, by = 'keyid')
merge(cty.dt, radon.dt, by = 'keyid', allow.cartesian = TRUE)
radon.dt
radon.dt[state == "MN"]
cty.dt[st == "MN"]
merge(radon.dt[state == "MN"], cty[st == "MN"], by = 'keyid')
merge(radon.dt[state == "MN"], cty.dt[st == "MN"], by = 'keyid')
merge(radon.dt[state == "MN"], cty.dt[st == "MN", list(keyid, cty, Uppm)], by = 'keyid')
merge(radon.dt[state == "MN"], cty.dt[st == "MN", list(keyid, cty, Uppm)], by = 'keyid')[county != cty]
cty.dt
cty.dt[, keyid := paste(stfips, ctfips)]
radon.dt
radon.dt[, keyid := paste(stfips, cntyfips)]
radon.dt
cty.dt
merge(radon.dt, cty.dt[, list(keyid, st, cty, Uppm)], by = 'keyid')
cty.dt[, duplicated(keyid)]
cty.dt[, keyid[duplicated(keyid)]]
cty.dt[keyid == "6 37"]
cty.dt[keyid == "6 75"]
cty.dt[keyid == "6 81"]
q()
y
source("helper_functions.R");
generate.disease.test.data()
disease.data <- generate.disease.test.data()
str(disease.data)
disease.data[, 1:10]
disease.data[disease.data$infected == 1 & disease.data$test.positive == 1]
disease.data
[disease.data$infected == 1 & disease.data$test.positive == 1]
disease.data[disease.data$infected == 1 & disease.data$test.positive == 1]
disease.data[, 'infected' == 1]
calculate.disease.test.probabilities(disease.data)
cointoss10 <- readRDS('cointoss10.rds');

n.heads.10 <- length(cointoss10[cointoss10 == 1]);
n.tails.10 <- length(cointoss10[cointoss10 == 0]);

qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red');

library(ggplot2)
cointoss10 <- readRDS('cointoss10.rds');

n.heads.10 <- length(cointoss10[cointoss10 == 1]);
n.tails.10 <- length(cointoss10[cointoss10 == 0]);

qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red');

theta.grid <- seq(0, 1, by = 0.0001)
cointoss10 <- readRDS('cointoss10.rds');

n.heads.10 <- length(cointoss10[cointoss10 == 1]);
n.tails.10 <- length(cointoss10[cointoss10 == 0]);

qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red');

cointoss10 <- readRDS('cointoss10.rds');

n.heads.10 <- length(cointoss10[cointoss10 == 1]);
n.tails.10 <- length(cointoss10[cointoss10 == 0]);

qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red');

qplot(theta.grid, dbeta(theta.grid, 10, 10), geom = 'line') + geom_line(aes(y = dbeta(theta.grid, 10 + n.heads.10, 10 + n.tails.10)), colour = 'red')
source("sample_rjags_template.R", echo = TRUE);
library(rjags)
source("sample_rjags_template.R", echo = TRUE);
source("sample_rjags_template.R", echo = TRUE);
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
jagsPosteriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
source("sample_rjags_template.R", echo = TRUE);
plot(coda.sample.data)
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
mcmc.prior.samples
 mcmc.prior.samples[, 'theta']
qplot(mcmc.prior.samples[, 'theta'], geom = 'density')
qplot(mcmc.posterior.samples[, 'theta'], geom = 'density')
qplot(mcmc.posterior.samples[, 'theta'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red');
mcmc.posterior.samples[1:10, 'theta']
mcmc.prior.samples[1:10, 'theta']
source("sample_rjags_template.R", echo = TRUE);
mcmc.prior.samples[1:10, 'theta']
mcmc.posterior.samples[1:10, 'theta']
qplot(mcmc.prior.samples[, 'theta'], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, 'theta']), colour = 'red');
singlemint_twocoin <- readRDS("singlemint_twocoin.rds");
singlemint_twocoin
singlemint_twocoin[, 1:10]
source("sample_rjags_template.R")
plot(mcmc.prior.samplesor
source('helper_functions.R');                                                                                       
twocoin.data <- readRDS('singlemint_twocoin.rds');                                                                  
use.data <- twocoin.data;                                                                                           
sample.count <- 10000;                                                                                              
chain.count  <- 5;                                                                                                  
adapt.steps  <- 500;                                                                                                
burnin.steps <- 1000;                                                                                               
jags.file <- 'singlemint_multiplecoin.jag';                                                                         
jagsPriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = dim(e.
data)[2]), n.chains = chain.count, n.adapt = adapt.steps);                                                          
update(jagsPriorModel, n.iter = burnin.steps);                                                                      
coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);   
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);                                                        
plot(coda.prior.sample.data)                                                                                        
jagsPosteriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = ng
th(use.data), y = use.data['tossdata', ]), n.chains = chain.count, n.adapt = adapt.steps);                          
update(jagsPosteriorModel, n.iter = burnin.steps);                                                                  
coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sampleou
nt);                                                                                                                
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);                                                
source("sample.R")
source("run_bern_singlemint.R")
q()
y
library(rjags);
source("sample_rjags_twocoin.R")
twocoin.data
source('helper_functions.R');

twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';

twocoin.data
rownames(twocoin.data)
rownames(twocoin.data) <- c('coinidx', 'tossdata')
twocoin.data
source("sample_rjags_twocoin.R")
source("sample_rjags_twocoin.R")
source("sample_rjags_twocoin.R", echo = TRUE)
source("sample_rjags_twocoin.R", echo = TRUE)
fivecoin.data
source("sample_rjags_twocoin.R", echo = TRUE)
source("sample_rjags_twocoin.R", echo = TRUE)
fivecoin.data
twocoin.data
colnames(twocoin.data)
colnames(twocoin.data) <- c('coin', 'cointoss')
rownames(twocoin.data) <- c('coin', 'cointoss')
twocoin.data
saveRDS(twocoin.data, file = 'singlemint_twocoin.rds')
source("sample_rjags_twocoin.R", echo = TRUE)
mcmc.posterior.samples
head(mcmc.posterior.samples)
qplot(mcmc.posterior.samples[, 'mu'], geom = 'density')
library(ggplot2)
qplot(mcmc.posterior.samples[, 'mu'], geom = 'density')
qplot(mcmc.posterior.samples[, 'theta[1]'], geom = 'density')
qplot(mcmc.posterior.samples[, 'theta[2]'], geom = 'density')
source("sample_rjags_full.R", echo = TRUE)
source("sample_rjags_full.R", echo = TRUE)
head(mcmc.posterior.samples)
qplot(mcmc.posterior.samples[, 'kappa'], geom = 'density')
qplot(mcmc.posterior.samples[, 'mu'], geom = 'density')
q()
y
