setwd("~/githubrepos/dublin_r_workshops/bdaworkshop2013")
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 2, 2), geom = 'line')
library(ggplot2)
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 2, 2), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 5, 5), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 50, 50), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 2, 2), geom = 'line')
likelihood <- function(theta, n, k) { return(theta^k + (1-theta)^(n-k))}
likelihood(0.4, 5, 3)
likelihood(0.2, 5, 3)
likelihood(0.1, 5, 3)
qplot(seq(0, 1, by = 0.001), likelihood(seq(0, 1, by = 0.001), 5, 3), geom = 'line')
likelihood(0, 5, 3)
likelihood <- function(theta, n, k) { return(theta^k * (1-theta)^(n-k))}
qplot(seq(0, 1, by = 0.001), likelihood(seq(0, 1, by = 0.001), 5, 3), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 50, 50), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 5, 5), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 5, 5), geom = 'line') + geom_line(aes(y = dbeta(seq(0, 1, by = 0.01), 5 + 42, 5 + 58)), colour = 'red')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 7, 3), geom = 'line') + geom_line(aes(y = dbeta(seq(0, 1, by = 0.01), 5 + 42, 5 + 58)), colour = 'red')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 7, 3), geom = 'line') + geom_line(aes(y = dbeta(seq(0, 1, by = 0.01), 7 + 42, 3 + 58)), colour = 'red')
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
q()
y
source("wsexercise.2.R")
lsos()
qplot(theta.seq, beta0101.posterior, geom = 'line', xlim = c(0.60, 0.75)) +
    geom_line(aes(y = beta1005.posterior), color = 'red')

cointoss1000 <- readRDS("cointoss1000.rds");

H.count <- sum(cointoss1000);
T.count <- length(cointoss1000) - H.count;

beta0101.posterior <- dbeta(theta.seq, 1 + H.count, 1 + T.count);

qplot(theta.seq, beta0101, geom = 'line') + geom_line(aes(y = beta0101.posterior), color = 'red')


beta0202.posterior <- dbeta(theta.seq, 2 + H.count, 2 + T.count);

qplot(theta.seq, beta0202,           geom = 'line') + geom_line(aes(y = beta0202.posterior), color = 'red')
qplot(theta.seq, beta0101.posterior, geom = 'line') + geom_line(aes(y = beta0202.posterior), color = 'red')


beta1010.posterior <- dbeta(theta.seq, 10 + H.count, 10 + T.count);

qplot(theta.seq, beta1010,           geom = 'line') + geom_line(aes(y = beta1010.posterior), color = 'red')
qplot(theta.seq, beta0101.posterior, geom = 'line') + geom_line(aes(y = beta1010.posterior), color = 'red')


beta1005.posterior <- dbeta(theta.seq, 10 + H.count, 5 + T.count);

qplot(theta.seq, beta1005,           geom = 'line') + geom_line(aes(y = beta1005.posterior), color = 'red')
qplot(theta.seq, beta0101.posterior, geom = 'line') + geom_line(aes(y = beta1005.posterior), color = 'red')

qplot(theta.seq, beta1005,           geom = 'line') + geom_line(aes(y = beta1005.posterior), color = 'red')

qplot(theta.seq, beta0101.posterior, geom = 'line', xlim = c(0.50, 0.75)) +
    geom_line(aes(y = beta1005.posterior), color = 'red')

qplot(theta.seq, beta0101.posterior, geom = 'line', xlim = c(0.55, 0.70)) +
    geom_line(aes(y = beta1005.posterior), color = 'red')

lsos()
rm(list = ls())
source("wsexercise.2.R")
lsos()
qplot(theta.seq, beta0101.10.posterior, geom = 'line', xlim = c(0.50, 0.75)) +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

qplot(theta.seq, beta0101.10.posterior, geom = 'line', xlim = c(0.25, 0.75)) +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

qplot(theta.seq, beta0101.10.posterior, geom = 'line', xlim = c(0.1, 0.9)) +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

qplot(theta.seq, beta0101, geom = 'line', xlim = c(0.1, 0.9)) +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.0505.plot <- qplot(theta.seq, beta0505, geom = 'line') +
    geom_line(aes(y = beta0505.10.posterior), color = 'red')

N1000.0505.plot <- qplot(theta.seq, beta0505, geom = 'line') +
    geom_line(aes(y = beta0505.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.0505.plot, N1000.0505.plot, nrow = 2)

source("wsexercise.2.R")
N10.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.10.posterior), color = 'red')

N1000.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2) 

    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.10.posterior), color = 'red')

N1000.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)

N10.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

N10.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.10.posterior), color = 'red')

N1000.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)
source("wsexercise.2.R")
rm(list = ls())
source("wsexercise.3.R")
qplot(theta.seq, posterior.numerical, geom = 'line') + geom_line(aes(y = posterior.analytic), color = 'red')

biased.prior <- ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq)
qplot(theta.seq, biased.prior, geom = 'line')
biased.prior <- 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq)
qplot(theta.seq, biased.prior, geom = 'line')
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
qplot(theta.seq, biased.prior, geom = 'line')



biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)

qplot(theta.seq, biased.prior, geom = 'line')

diff(theta.seq)
sum(biased.prior * theta.seq)
sum(biased.prior * 0.001)
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')

biased.posterior <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

biased.prior.2     <- 0.5 * (dbeta(theta.seq, 250, 750) + dbeta(theta.seq, 750, 250))
qplot(theta.seq, biased.prior.2, geom = 'line')

biased.posterior.2 <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

biased.posterior.2 <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.2, geom = 'line') + geom_line(aes(y = biased.posterior.2), color = 'red')

biased.posterior.2 <- calculate.posterior.density(biased.prior.2, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.2, geom = 'line') + geom_line(aes(y = biased.posterior.2), color = 'red')

biased.prior.2     <- 0.5 * (dbeta(theta.seq, 25, 75) + dbeta(theta.seq, 75, 25))
qplot(theta.seq, biased.prior.2, geom = 'line')

biased.posterior.2 <- calculate.posterior.density(biased.prior.2, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.2, geom = 'line') + geom_line(aes(y = biased.posterior.2), color = 'red')

biased.prior.3     <- 0.5 * (dbeta(theta.seq, 250, 750) + dbeta(theta.seq, 750, 250))
qplot(theta.seq, biased.prior.3, geom = 'line')

biased.posterior.3 <- calculate.posterior.density(biased.prior.3, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.3, geom = 'line') + geom_line(aes(y = biased.posterior.3), color = 'red')

d0 <- theta.seq[2] - theta.seq[1]

part.1 <- pmax(0, 0.25 + ifelse(theta.seq <= 0.25, theta.seq - 0.25, 0.25 - theta.seq))
part.2 <- rev(part.one)
part.3 <- pmax(0, 0.50 + ifelse(theta.seq <= 0.50, theta.seq - 0.50, 0.50 - theta.seq))

threeposs.prior <- part.1 + part.2 + part.3
threeposs.prior <- threeposs.prior / sum(threeposs.prior * d0)

qplot(theta.seq, threeposs.prior, geom = 'line')

d0 <- theta.seq[2] - theta.seq[1]

part.1 <- pmax(0, 0.25 + ifelse(theta.seq <= 0.25, theta.seq - 0.25, 0.25 - theta.seq))
part.2 <- rev(part.one)
part.3 <- pmax(0, 0.50 + ifelse(theta.seq <= 0.50, theta.seq - 0.50, 0.50 - theta.seq))

d0 <- theta.seq[2] - theta.seq[1]

part.1 <- pmax(0, 0.25 + ifelse(theta.seq <= 0.25, theta.seq - 0.25, 0.25 - theta.seq))
part.2 <- rev(part.1)
part.3 <- pmax(0, 0.50 + ifelse(theta.seq <= 0.50, theta.seq - 0.50, 0.50 - theta.seq))

threeposs.prior <- part.1 + part.2 + part.3
threeposs.prior <- threeposs.prior / sum(threeposs.prior * d0)

qplot(theta.seq, threeposs.prior, geom = 'line')

threeposs.posterior <- calculate.posterior.density(threeposs.prior, cointoss10, theta.seq)
qplot(theta.seq, threeposs.prior, geom = 'line') + geom_line(aes(y = threeposs.posterior), color = 'red')

source("lib.R")
lsos()
source("wsexercise.4.R")
source("wsexercise.4.R")
hier.posterior
str(hier.posterior)
hier.posterior[1:4, 1:10]
source("wsexercise.4.R")
hier.posterior[1:4, 1:10]
hier.posterior[!is.na(hier.posterior)]
hier.posterior[is.na(hier.posterior)]
qplot(mu.seq, mu.prior, geom = 'line')
source("wsexercise.4.R")
qplot(mu.seq, mu.prior, geom = 'line')
hier.posterior
qplot(hier.posterior, geom = 'density2d')
melt(hier.posterior)
qplot(theta.seq[Var1], mu.seq[Var2], data = melt(hier.posterior), geom = 'density2d')
source("wsexercise.4.R")
qplot(theta.seq[Var1], mu.seq[Var2], data = melt(hier.posterior), geom = 'density2d')
q()
y
lsos()
rm(list = ls())
source("wsexercise.4.R")
str(hier.posterior)
melt(hier.posterior)
qplot(Var1, Var2, value, data = melt(hier.posterior), geom = 'density2d')
melt(hier.posterior)
data.table(melt(hier.posterior))
qplot(Var1, Var2, value, data = melt(hier.posterior), geom = 'density2d')
qplot(Var1, Var2, value, data = data.table(melt(hier.posterior)), geom = 'density2d')
data.table(melt(hier.posterior))[is.na(value)]
data.table(melt(hier.posterior))[is.na(Var1)]
geom_density2d
?geom_density2d
qplot(Var1, Var2, geom = melt(hier.posterior), colour = value)
qplot(Var1, Var2, geom = melt(hier.posterior), geom = 'point', colour = value)
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value)
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.1), alpha = I(0.1))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.3), alpha = I(0.1))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.3), alpha = I(0.5))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.3))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, alpha = I(0.3))
qplot(theta.seq[Var1], mu.seq[Var2], data = melt(hier.posterior), geom = 'point', colour = value, alpha = I(0.3))
qplot(theta.seq[Var1], mu.seq[Var2], value, data = melt(hier.posterior), geom = 'contour')
qplot(theta.seq[Var1], mu.seq[Var2], value, data = melt(hier.posterior), geom = 'contour2d')
geom_contour
?geom_contour
ggplot(melt(hier.posterior), aes(x = Var1, y = Var2, z = value)) + geom_contour()
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour')
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour', xlim = c(0, 1))
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour', xlim = c(0, 1), ylim = c(0, 1))
source("wsexercise.4.R")
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour', xlim = c(0, 1), ylim = c(0, 1))
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour'
    ,xlim = c(0, 1), ylim = c(0, 1), xlab = expression(theta), ylab = expression(mu))

d0  <- 0.005
dmu <- 0.005

theta.seq <- seq(0 + d0,  1 - d0, by = d0)
mu.seq    <- seq(0 + dmu, 1 - dmu, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 100


hier.posterior.100 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.100), geom = 'contour'
    ,xlim = c(0, 1), ylim = c(0, 1), xlab = expression(theta), ylab = expression(mu))



lsos()
source("wsexercise.4.R")
source("wsexercise.4.R")
lsos()
rm(list = ls())
q()
y
source("wsexercise.5.R")
lsos()
cointoss10
rm(list = ls())
source("wsexercise.5.R")
source("wsexercise.5.R")
source("wsexercise.5.R")
source("wsexercise.5.R")
source("wsexercise.5.R")
coin.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.stanfit <- sampling(coin.stanmodel
                        ,data      = stan.data.lst
                        ,algorithm = "NUTS"
                        ,warmup    = warmup.count
                        ,iter      = warmup.count + sample.count
                        ,chains    = chain.count
                        ,verbose   = TRUE
                         )

traceplot(coin.stanfit)
traceplot(coin.stanfit, inc_warmup = FALSE)
traceplot(coin.stanfit, inc_warmup = TRUE)
extract(coin.stanfit)$theta
qplot(extract(coin.stanfit)$theta, geom = 'density', xlim = c(0, 1))
qplot(extract(coin.stanfit)$theta, geom = 'density', xlim = c(0, 1)) + geom_line(aes(x = seq(0, 1, by = 0.001), y = dbeta(seq(0, 1, by = 0.001), 2, 2)), color = 'red')
theta.seq <- seq(0, 1, by = 0.001)
H.10.count <- sum(cointoss10)
T.10.count <- length(cointoss10) - H.10.count

beta.prior.0202 <- dbeta(theta.seq, 2, 2)
beta.posterior  <- dbeta(theta.seq, 2 + H.10.count, 2 + T.10.count)


qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0202), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue')
qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0202), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue') +
    xlab(expression(theta))

stan.file <- 'singlemint_singlecoin_flexible.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(y      = cointoss10
                     ,N      = length(cointoss10)
                     ,priorA = 5
                     ,priorB = 5
                      )

coin.flex.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.flex.stanfit <- sampling(coin.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

stan.data.lst
beta.prior.0505 <- dbeta(theta.seq, 5, 5)
beta.posterior  <- dbeta(theta.seq, 5 + H.10.count, 5 + T.10.count)


qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0505), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue') +
    xlab(expression(theta))


                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

beta.prior.0505 <- dbeta(theta.seq, 5, 5)
beta.posterior  <- dbeta(theta.seq, 5 + H.10.count, 5 + T.10.count)


qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0505), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue') +
    xlab(expression(theta))

tracetraceplot(coin.stanfit)

traceplot(coin.stanfit)

?traceplot
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
q(0
q()
y
source("wsexercise.1.R", echo = TRUE)
false.alarm.seq <- seq(0, 0.1, by = 0.0005)

infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 1000000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

source("lib.R")



diseasedata.dt <- generate.disease.test.data(n           = 100000
                                            ,prior.prob  = 0.001
                                            ,hit.rate    = 0.99
                                            ,false.alarm = 0.05)


calculate.disease.test.probabilities(diseasedata.dt)



infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 1000000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

false.alarm.seq <- seq(0, 0.1, by = 0.0005)

infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 100000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 1000000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')



infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 100000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

getwd()
q()
y
source("lib.R")
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')

theta.seq <- seq(0, 1, by = 0.001)

biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))

biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')

weird.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 50000), rep(0, 50000)), theta.seq)
biased.prior
theta.seq
cointoss10
cointoss10 <- readRDS("cointoss10.rds")

cointoss10
c(rep(1, 50000), rep(0, 50000))
calculate.posterior.density
weird.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 50000), rep(0, 50000)), theta.seq)
weird.posterior
biased.posterior <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

test <- c(rep(1,50000), rep(0,50000))

qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

test
str(test)
biased.posterior

qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

biased.posterior <- calculate.posterior.density(biased.prior, test, theta.seq)
qplot(theta.seq, biased.posterior, geom = 'line')
biased.posterior[1:100]
biased.posterior[300:400]
biased.posterior[is.nan(biased.posterior)]
biased.posterior[!is.nan(biased.posterior)]
biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 10000), rep(0, 10000)), theta.seq)
source("lib.R"); biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 10000), rep(0, 10000)), theta.seq)
source("lib.R"); biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 10000), rep(0, 10000)), theta.seq)
calculate.data.probability
calculate.data.probability(c(rep(1, 10000), rep(0, 10000)), 0.5)
calculate.data.probability(c(rep(1, 5000), rep(0, 5000)), 0.5)
calculate.data.probability(c(rep(1, 50), rep(0, 50)), 0.5)
calculate.data.probability(c(rep(1, 10), rep(0, 10)), 0.5)
calculate.data.probability
calculate.likelihood
calculate.likelihood(1, 0.5)
calculate.likelihood(1, 0.25)
calculate.data.probability(c(rep(1, 10), rep(0, 10)), 0.5)
calculate.data.probability
calculate.data.probability(c(rep(1,5), rep(0, 5)), 0.5)
c(rep(1,5), rep(0,5))
calculate.data.probability(c(rep(1,5), rep(0, 5)), 0.2)
calculate.data.probability
calculate.data.probability(c(rep(1,5), rep(0, 5)), c(0.3,0.4))
calculate.data.probability(c(rep(1,5), rep(0, 5)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,5000), rep(0, 5000)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,500), rep(0, 500)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,1000), rep(0, 1000)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,750), rep(0, 750)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,500), rep(0, 500)), seq(0,1,by = 0.1))
source("lib.R"); calculate.data.probability(c(rep(1,500), rep(0, 500)), seq(0,1,by = 0.1))
source("lib.R"); calculate.data.probability(c(rep(1,1000), rep(0, 1000)), seq(0,1,by = 0.1))
source("lib.R"); calculate.data.probability(c(rep(1,800), rep(0, 800)), seq(0,1,by = 0.1))
biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1,500),rep(0,500)), theta.seq)
qplot(theta.seq, biased.posterior, geom = 'line')
qplot(theta.seq, biased.posterior, geom = 'line', xlim = c(0.4, 0.6))
biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1,600),rep(0,600)), theta.seq)
calculate.data.probability
getwd()
q()
y
source("lib.R")
lsos()
cointoss10 <- readRDS("cointoss10.rds")

d0  <- 0.005
dmu <- 0.005

theta.seq <- seq(0 + d0,  1 - d0, by = d0)
mu.seq    <- seq(0 + dmu, 1 - dmu, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 5


hier.posterior.5 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

hier.5.plot <- qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.5)
                    ,geom = 'contour', xlim = c(0,1), ylim = c(0,1)
                    ,xlab = expression(theta), ylab = expression(mu))

plot(hier.5.plot)
source("wsexercise.4.R", echo = TRUE)
plot(hier.5.plot)
plot(hier.100.plot)
hier.posterior.100
head(hier.posterior.100)
str(hier.posterior.100)
d0  <- 0.001
dmu <- 0.001

theta.seq <- seq(0, 1, by = d0)
mu.seq    <- seq(0, 1, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 5


hier.posterior.5 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

hier.5.plot <- qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.5)
                    ,geom = 'contour', xlim = c(0,1), ylim = c(0,1)
                    ,xlab = expression(theta), ylab = expression(mu))

plot(hier.5.plot)
str(hier.5.plot)
str(hier.posterior.5)
d0  <- 0.001
dmu <- 0.001

theta.seq <- seq(0 + d0,  1 - d0,  by = d0)
mu.seq    <- seq(0 + dmu, 1 - dmu, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 5

hier.posterior.5 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

hier.5.plot <- qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.5)
                    ,geom = 'contour', xlim = c(0,1), ylim = c(0,1)
                    ,xlab = expression(theta), ylab = expression(mu))

plot(hier.5.plot)
str(hier.5.plot)
str(hier.posterior.5)
melt(hier.posterior.5)
data.table(melt(hier.posterior.5))
data.table(melt(hier.posterior.5))[Var1 == 500]
qplot(Var2, value, data = data.table(melt(hier.posterior.5))[Var1 == 500], geom = 'line')
qplot(mu.prior[Var2], value, data = data.table(melt(hier.posterior.5))[Var1 == 500], geom = 'line')
mu.prior
qplot(mu.seq[Var2], value, data = data.table(melt(hier.posterior.5))[Var1 == 500], geom = 'line')
qplot(mu.seq[Var2], value, data = data.table(melt(hier.posterior.100))[Var1 == 500], geom = 'line')
cointoss10 <- readRDS("cointoss10.rds")

stan.file <- 'singlemint_singlecoin.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(y = cointoss10
                     ,N = length(cointoss10)
                      )

coin.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.stanfit <- sampling(coin.stanmodel
                        ,data      = stan.data.lst
                        ,algorithm = "NUTS"
                        ,warmup    = warmup.count
                        ,iter      = warmup.count + sample.count
                        ,chains    = chain.count
                        ,verbose   = TRUE
                         )

traceplot(coin.stanfit)

traceplot(coin.stanfit) + expand_limits(y = c(0, 1))
readRDS("~/DublinR/dublin_r_workshops/wsbdaworkshop2013/singlemint_twocoin.rds")
smtc <- readRDS("~/DublinR/dublin_r_workshops/wsbdaworkshop2013/singlemint_twocoin.rds")
smtc
melt(smtc)
smtc
melt(smtc)
smtc
t(smtc)
melt(t(smtc))
data.table(melt(t(smtc)))
data.table(melt(t(smtc)))[, .(success = sum(value), trials = .N), by = Var2]
data.table(melt(t(smtc)))
data.table(melt(t(smtc)))[Var2 == 1]
data.table(melt(t(smtc)))
data.table(melt(t(smtc)))
data.table(theta = c(0.4, 0.5, 0.55), N = 70)
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, rbinom(prob = theta), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, rbinom(N, prob = theta), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, rbinom(N, size = N, prob = theta), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, .(success = rbinom(N, size = N, prob = theta), trials = N), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, .(success = rbinom(N, size = N, prob = theta), trials = N), by = .I]
source("lib.R")
generate.coin.data
generate.coin.data(c(0.4, 0.5, 0.55), 50)
coindata.dt <- generate.coin.data(c(0.4, 0.5, 0.55), 50)
coindata.dt
coindata.dt
coindata.dt
source("lib.R")
coindata.dt <- generate.coin.data(c(0.4, 0.5, 0.55), 50)
coindata.dt
coindata.dt[1:2]
 saveRDS(coindata.dt[1:2], file = 'singlemint_twocoin.rds', compress = 'xz')
readRDS("singlemint_twocoin.rds")
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
smtc.dt <- readRDS("singlemint_twocoin.rds")
smtc.dt
smtc.dt <- readRDS("singlemint_twocoin.rds")

stan.file <- 'singlemint_singlecoin_flexible.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(n_coin = smtc.dt[, length(unique(coin.id))]
                     ,trials = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

smtc.dt <- readRDS("singlemint_twocoin.rds")

stan.file <- 'singlemint_multiplecoin.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(n_coin = smtc.dt[, length(unique(coin.id))]
                     ,trials = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

stan.data.lst <- list(n_coins = smtc.dt[, length(unique(coin.id))]
                     ,trials  = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit)
traceplot(coin.smtc.stanfit) + expand_limit(y = c(0, 1))
traceplot(coin.smtc.stanfit) + expand_limits(y = c(0, 1))
stan.data.lst <- list(n_coins = smtc.dt[, length(unique(coin.id))]
                     ,K = 5
                     ,trials  = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit) + expand_limits(y = c(0,1))

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)
coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit) + expand_limits(y = c(0,1))


smtc.dt <- readRDS("singlemint_twocoin.rds")

stan.file <- 'singlemint_multiplecoin.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(n_coins = smtc.dt[, length(unique(coin.id))]
                     ,K = 5
                     ,trials  = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit) + expand_limits(y = c(0,1))

lsos()
rm9test)
rm(test)
lsos()


smtc.dt
coindata.dt
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55), 50)
coin5.dt
source("lib.R")
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55), 50)
coin5.dt
readRDS("singlemint_twocoin.rds")
rm(list = ls())
source("wsexercise.6.R")
source("wsexercise.6.R")
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 100, 10))
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 100, 10), geom = 'line')
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 10, 1), geom = 'line')
source("wsexercise.6.R")
source("wsexercise.6.R")
traceplot(coin.full.stanfit) + expand_limits(y = c(0,1))

source("wsexercise.6.R")
traceplot(coin.full.stanfit) + expand_limits(y = c(0,1))
source("wsexercise.6.R")
source("wsexercise.6.R")
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 1, 0.1), geom = 'line')
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 1.1, 0.11), geom = 'line')
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                              ,c(50, 100, 75, 100, 150))

coin5.dt
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)

                              ,c(50, 100, 75, 100, 150))

coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                              ,c(50,   100,   75,  125,  150))

coin5.dt
coin5.dt
coin5.dt
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                              ,c(50,   100,   75,  125,  150))

stan.data.lst <- list(n_coins = coin5.dt[, length(unique(coin.id))]
                     ,trials  = coin5.dt$trials
                     ,success = coin5.dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

coin.tossvar.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.tossvar.stanfit <- sampling(coin.tossvar.stanmodel
                                ,data      = stan.data.lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup.count
                                ,iter      = warmup.count + sample.count
                                ,chains    = chain.count
                                ,verbose   = TRUE
                                 )

traceplot(coin.tossvar.stanfit) + expand_limits(y = c(0,1))

source("lib.R")
generate.hierarchical.coin.data()
generate.hierarchical.coin.data()
test.dt <- generate.hierarchical.coin.data()
test.dt
test.dt
rm(test.dt)
coin_05.dt <- generate.hierarchical.coin.data(coins = 5)
coin_50.dt <- generate.hierarchical.coin.data(coins = 50)
coin_05.dt
coin_50.dt
coin_05.dt <- generate.hierarchical.coin.data(coins = 5)
coin_50.dt <- generate.hierarchical.coin.data(coins = 50)

coin.alt.stanmodel <- stan_model(stan.file, verbose = TRUE)

stan.data.lst <- list(n_coins = coin_05.dt[, length(unique(coin.id))]
                     ,trials  = coin_05.dt$trials
                     ,success = coin_05.dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

coin.var05.stanfit <- sampling(coin.alt.stanmodel
                              ,data      = stan.data.lst
                              ,algorithm = "NUTS"
                              ,warmup    = warmup.count
                              ,iter      = warmup.count + sample.count
                              ,chains    = chain.count
                              ,verbose   = TRUE
                               )

traceplot(coin.var05.stanfit) + expand_limits(y = c(0,1))



stan.data.lst <- list(n_coins = coin_50.dt[, length(unique(coin.id))]
                     ,trials  = coin_50.dt$trials
                     ,success = coin_50.dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

coin.var50.stanfit <- sampling(coin.alt.stanmodel
                              ,data      = stan.data.lst
                              ,algorithm = "NUTS"
                              ,warmup    = warmup.count
                              ,iter      = warmup.count + sample.count
                              ,chains    = chain.count
                              ,verbose   = TRUE
                               )

traceplot(coin.var50.stanfit) + expand_limits(y = c(0,1))

traceplot(coin.var50.stanfit) + expand_limits(y = c(0,1))

traceplot(coin.var05.stanfit) + expand_limits(y = c(0,1))
traceplot(coin.var05.stanfit, pars = c('mu', 'K')) + expand_limits(y = c(0,1))
q()
y
getwd()
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
q()
y
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
source("lib.R")
generate.multiple.mint.data()
source("lib.R")
generate.multiple.mint.data()
source("lib.R"); generate.multiple.mint.data()
source("lib.R"); generate.multiple.mint.data()
mint.id
source("lib.R"); mint.dt <- generate.multiple.mint.data()
as.integer(round(rnorm(sum(mint.dt$coin.count), 250, 50)))
toss.count <- as.integer(round(rnorm(sum(mint.dt$coin.count), 250, 50)))
mint.dt
mint.dt[, .(toss.count = rnorm(coin.count, 250, 50)), by = mint.id]
mint.dt[, .(toss.count = round(rnorm(coin.count, 250, 50), 0)), by = mint.id]
mint.dt[, .(mu, K, toss.count = round(rnorm(coin.count, 250, 50), 0)), by = mint.id]
mint.dt[, .(mu, K, toss.count = round(rnorm(coin.count, 250, 50), 0)), by = mint.id]
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
rbeta(10, 382.5, 367.5)
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()
mint.dt
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]
mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]; mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]; mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]; mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]; mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data()[]; mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data(); mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data(); mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data(); mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data(); mint.dt
source("lib.R"); mint.dt <- generate.multiple.mint.data(); mint.dt
mint.dt[, .(mint.id, coin.id, toss.count, success)]
knit2pdf("wsbda201603_worksheet.Rnw")
generate.multiple.mint.data()
source("wsexercise.7.R")
source("wsexercise.7.R")
lsos()
source("wsexercise.7.R")
multiple.dt
inputdata.dt <- multiple.dt[, .(mint.id, coin.id, toss.count, success)]
inputdata.dt
inputdata.dt
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
stan.data.lst
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
stan.data.lst
str(stan.data.lst)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
multiplemint.stanfit <- sampling(multiplemint.stanmodel
                                ,data      = stan.data.lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup.count
                                ,iter      = warmup.count + sample.count
                                ,chains    = chain.count
                                ,verbose   = TRUE
                                 )

source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
source("wsexercise.7.R", echo = TRUE)
traceplot(multiplemint.stanfit)
traceplot(multiplemint.stanfit, ncol = 5)
traceplot(multiplemint.stanfit, ncol = 5) + expand_limits(y = 0)
traceplot(multiplemint.stanfit, ncol = 5) + expand_limits(y = c(0,1))
stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 100
                     ,priorRate  = 1
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.stanfit <- sampling(multiplemint.stanmodel
                                ,data      = stan.data.lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup.count
                                ,iter      = warmup.count + sample.count
                                ,chains    = chain.count
                                ,verbose   = TRUE
                                 )

traceplot(multiplemint.stanfit, ncol = 5) + expand_limits(y = c(0,1))
lsos()
traceplot(multiplemint.stanfit, pars = c('mu', 'K'), ncol = 5) + expand_limits(y = c(0,1))
qplot(seq(0, 1000, by = 0.1), dgamma(seq(0, 1000, by = 0.1), shape = 100, rate = 1), geom = 'line')
qplot(seq(0, 1000, by = 0.1), dgamma(seq(0, 1000, by = 0.1), shape = 10, rate = 0.1), geom = 'line')
qplot(seq(0, 1000, by = 0.1), dgamma(seq(0, 1000, by = 0.1), shape = 100, rate = 1), geom = 'line')
qplot(seq(0, 1000, by = 0.1), dgamma(seq(0, 1000, by = 0.1), shape = 10, rate = 0.1), geom = 'line')
qplot(seq(0, 1000, by = 0.1), dgamma(seq(0, 1000, by = 0.1), shape = 1, rate = 0.01), geom = 'line')
qplot(seq(0, 1000, by = 0.1), dgamma(seq(0, 1000, by = 0.1), shape = 1.1, rate = 0.011), geom = 'line')
log(100)
qplot(seq(0, 1000, by = 0.1), dlnorm(seq(0, 1000, by = 0.1), mean = 5, sd = 1), geom = 'line')
log(500)
qplot(seq(0, 1000, by = 0.1), dlnorm(seq(0, 1000, by = 0.1), mean = 6.5, sd = 1), geom = 'line')
source("wsexercise.7.R", echo = TRUE)
traceplot(multiplemint.stanfit, pars = c('mu', 'K'), ncol = 5) + expand_limits(y = c(0,1))
qplot(seq(0, 1000, by = 0.1), dlnorm(seq(0, 1000, by = 0.1), mean = 6, sd = 1), geom = 'line')
qplot(seq(0, 10000, by = 0.1), dlnorm(seq(0, 10000, by = 0.1), mean = 7, sd = 1), geom = 'line')
log(1000)
source("wsexercise.7.R", echo = TRUE)
qplot(seq(0, 10000, by = 0.1), dgamma(seq(0, 10000, by = 0.1), shape = 1.1, rate = 0.0011), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 1.1, rate = 0.0011), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 2.2, rate = 0.0011), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 1.6, rate = 0.0011), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 1.7, rate = 0.0011), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 1.7, rate = 0.001), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 2, rate = 0.001), geom = 'line')
source("wsexercise.7.R", echo = TRUE)
traceplot(multiplemint.stanfit, pars = c('mu', 'K'), ncol = 5) + expand_limits(y = c(0,1))
traceplot(multiplemint.stanfit, pars = c('mu', 'K'), ncol = 5) + expand_limits(y = c(0,1))
extract(multiplemint.stanfit)$K
extract(multiplemint.stanfit)$K[,1]
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,1]))
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.stanfit)$K[,2]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.stanfit)$K[,3]), colour = 'blue')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.stanfit)$K[,3]), colour = 'blue')+ geom_density(aes(x = extract(multiplemint.stanfit)$K[,4]), colour = 'green')
lsos()
mint.dt
source("wsexercise.7.R", echo = TRUE)
qplot(seq(0, 10000, by = 0.1), dlnorm(seq(0, 10000, by = 0.1), mean = 7, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 7, sd = 2), geom = 'line')
exp(7)
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 7, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 7, sd = 1), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 7, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 10, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 8, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 9, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 10, sd = 2), geom = 'line')
stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorMean = 9
                     ,priorSD   = 2
                     ,priorA    = 2
                     ,priorB    = 2
                      )

multiplemint.lognorm.stanfit <- sampling(multiplemint.lognorm.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 8, sd = 2), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 8, sd = 1.5), geom = 'line')
stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorMean = 8
                     ,priorSD   = 1.5
                     ,priorA    = 2
                     ,priorB    = 2
                      )

multiplemint.lognorm.stanfit <- sampling(multiplemint.lognorm.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 8, sd = 1), geom = 'line')
stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorMean = 8
                     ,priorSD   = 1
                     ,priorA    = 2
                     ,priorB    = 2
                      )

multiplemint.lognorm.stanfit <- sampling(multiplemint.lognorm.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 7, sd = 1), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 7, sd = 0.5), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dlnorm(seq(0, 5000, by = 0.1), mean = 9, sd = 0.5), geom = 'line')
qplot(seq(0, 10000, by = 0.1), dlnorm(seq(0, 10000, by = 0.1), mean = 9, sd = 0.5), geom = 'line')
qplot(seq(0, 10000, by = 0.1), dlnorm(seq(0, 10000, by = 0.1), mean = 8, sd = 0.5), geom = 'line')
stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorMean = 8
                     ,priorSD   = 0.5
                     ,priorA    = 2
                     ,priorB    = 2
                      )

multiplemint.lognorm.stanfit <- sampling(multiplemint.lognorm.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )
qplot(seq(0, 10000, by = 0.1), dlnorm(seq(0, 10000, by = 0.1), mean = 8, sd = 0.5), geom = 'line')
ggplot() + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,3]), colour = 'blue') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,4]), colour = 'green')
str(extract(multiplemint.lognorm.stanfit)$K)
traceplot(multiplemint.lognorm.stan, par = c("mu", "K"))
traceplot(multiplemint.lognorm.stanfit, par = c("mu", "K"))
ggplot() + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,3]), colour = 'blue') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,4]), colour = 'green') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'yellow')
ggplot() + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,3]), colour = 'blue') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,4]), colour = 'green') + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'yellow') + scale_x_continuous(limits = c(0, 10000))
extract(multiplemint.stanfit)$K
summary(extract(multiplemint.stanfit)$K)
knit2pdf("wsbda201603_worksheet.Rnw")
coin.mean <- 150
coin.sd   <-  20

toss.mean <- 500
toss.sd   <-  50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)

knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
coin.mean <- 150
coin.sd   <-  20

toss.mean <- 500
toss.sd   <-  50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)

multiple.more.dt
qplot(seq(0, 1, by = 0.001), dbeta(seq(0, 1, by = 0.001), 365, 180), geom = 'line')
qplot(seq(0, 1, by = 0.001), dbeta(seq(0, 1, by = 0.001), 180, (364-179+1), geom = 'line')
qplot(seq(0, 1, by = 0.001), dbeta(seq(0, 1, by = 0.001), 180, (364-179+1)), geom = 'line')
stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 2
                     ,priorRate  = 0.01
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

ggplot() + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,3]), colour = 'blue') + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,4]), colour = 'green') + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'yellow') + scale_x_continuous(limits = c(0, 10000))
ggplot() + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,2]), colour = 'red') + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,3]), colour = 'blue') + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,4]), colour = 'green') + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'yellow') + scale_x_continuous(limits = c(0, 5000))
lsos()
multiple.more.dt
qplot(theta, data = multiple.more.dt, geom = 'density') + facet_wrap(~mint.id)
qplot(theta, data = multiple.more.dt, geom = 'density') + facet_wrap(~K)
extract(multiple.more.dt)$theta
extract(multiple.more.dt)
extract(multiple.more.stanfit)$theta
extract(multiplemint.more.stanfit)$theta
melt(extract(multiplemint.more.stanfit)$theta)
str(extract(multiplemint.more.stanfit)$theta)
extract(multiplemint.more.stanfit)$theta)[,multiple.more.dt$mint.id == 5]
multiple.more.dt$mint.id
multiple.more.dt$mint.id == 5
extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]
multiple.more.dt
str(multiplemint.more.stanfit)
multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 2
                     ,priorRate  = 0.01
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]
str(extract(multiplemint.more.stanfit)$theta)
inputdata.dt <- multiple.mint.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 2
                     ,priorRate  = 0.01
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

str(extract(multiplemint.more.stanfit)$theta)
inputdata.dt
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 2
                     ,priorRate  = 0.01
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

str(extract(multiplemint.more.stanfit)$theta)
inputdata.dt
extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]
melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5])
str(melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]))
qplot(Var2, value, data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]), group = iterations, geom = 'boxplot')
warmup.count <- 250
sample.count <- 250
chain.count  <- 8

coin.mean <- 150
coin.sd   <-  20

toss.mean <- 500
toss.sd   <-  50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 2
                     ,priorRate  = 0.01
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

str(melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]))
qplot(Var2, value, data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]), group = iterations, geom = 'boxplot')
ggplot(data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mind.id == 5])) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1)
ggplot(data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mind.id == 5])) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1, group = iterations))
ggplot(data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mind.id == 5])) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1, group = iterations)
melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5])
ggplot(data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mind.it == 5])) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1, group = iterations)
ggplot(data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5])) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1, group = iterations)
str(melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id == 5]))
ggplot(data = melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mind.it == 5])) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1, group = iterations)
plotdata.dt <- melt(extract(multiplemint.more.stanfit)$theta[,multiple.more.dt$mint.id==5])
setDT(plotdata.dt)
plotdata.dt
ggplot(data = plotdata.dt) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1, group = iterations)
ggplot(data = plotdata.dt) + geom_errorbar(aes(x = Var2, ymin = min(value), ymax = max(value)), width = 0.1)
ggplot(data = plotdata.dt) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value)), width = 0.1)
ggplot(data = plotdata.dt[iterations <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value)), width = 0.1)
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value)), width = 0.1)
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value)), width = 0)
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value)), group = Var2, width = 0)
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value), group = Var2), width = 0)
plotdata.dt
plotdata.dt[, .(mean(value), min(value), max(value)), by = Var2]
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = as.factor(Var2), y = mean(value), ymin = min(value), ymax = max(value)), width = 0)
plotdata.dt[iterations <= 50 & Var2 <= 50, .(mean(value), min(value), max(value)), by = Var2]
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value)), group = iterations, width = 0)
ggplot(data = plotdata.dt[iterations <= 50][Var2 <= 50]) + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value), group = iterations), width = 0)
ggplot() + geom_errorbar(aes(x = Var2, y = mean(value), ymin = min(value), ymax = max(value), group = iterations), width = 0, data = plotdata.dt[iterations <= 50][Var2 <= 50])
ggplot(data = plotdata.dt[Var2 <= 10]) + geom_density(aes(x = value), group = Var2)
ggplot(data = plotdata.dt[Var2 <= 10]) + geom_density(aes(x = value, group = Var2))
ggplot(data = plotdata.dt[Var2 <= 50]) + geom_density(aes(x = value, group = Var2))
extract(multiplemint.more.stanfit)$K
melt(extract(multiplemint.more.stanfit)$K)
ggplot(data = melt(extract(multiplemint.more.stanfit)$K)) + geom_density(aes(x = value, group = Var2))
ggplot(data = melt(extract(multiplemint.more.stanfit)$K)) + geom_density(aes(x = value, colour = Var2))
ggplot(data = melt(extract(multiplemint.more.stanfit)$K)) + geom_density(aes(x = value), colour = Var2)
ggplot(data = melt(extract(multiplemint.more.stanfit)$K)) + geom_density(aes(x = value, colour = Var2))
ggplot(data = melt(extract(multiplemint.more.stanfit)$K)) + geom_density(aes(x = value, colour = Var2, group = Var2))
ggplot(data = melt(extract(multiplemint.more.stanfit)$K)) + geom_density(aes(x = value, colour = as.character(Var2), group = Var2))
inputdata.dt
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,1]), colour = 'red')
mint.mu
mint.K
coin.mean <- 300
coin.sd   <-  50

toss.mean <- 500
toss.sd   <-  50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 2
                     ,priorRate  = 0.01
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,1]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,2])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,2]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,3])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,3]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,4])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,4]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 2, rate = 0.01), geom = 'line')
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 1.5, rate = 0.015), geom = 'line')
1.5 / 0.015
qplot(seq(0, 5000, by = 0.1), dgamma(seq(0, 5000, by = 0.1), shape = 1.5, rate = 0.0015), geom = 'line')
stan.file <- 'multiplemint_hierarchical.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

multiplemint.stanmodel <- stan_model(stan.file, verbose = TRUE)

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.stanfit <- sampling(multiplemint.stanmodel
                                ,data      = stan.data.lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup.count
                                ,iter      = warmup.count + sample.count
                                ,chains    = chain.count
                                ,verbose   = TRUE
                                 )

lsos()
rm(list = ls())
gc()
gc()
gc()
gc()
lsos()
lsos()
gc()
lsos()
gc()
lsos()
q()
y
source("wsexercise.7.R")
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')
lsos()
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')  + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')  + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'blue')
warmup.count <- 250
sample.count <- 250
chain.count  <- 8

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')  + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'blue')
coin.mean <- 200
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')  + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'blue')
source("wsexercise.7.R")
knit2pdf("wsbda201603_worksheet.Rnw")
getwd()
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
  C-c C-c> 
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf
lsos()
knit2pdf("wsbda201603_worksheet.Rnw")
getwd()
gc()
getwd()
?knit2pdf
library(knitr)
?knit2pdf
knit2pdf("wsbda201603_worksheet.Rnw")
warmup.count <- 250
sample.count <- 250
chain.count  <- 8

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

knit2pdf("wsbda201603_worksheet.Rnw")
ggplot() + geom_density(aes(x = extract(multiplemint.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.more.stanfit)$K[,5]), colour = 'red')  + geom_density(aes(x = extract(multiplemint.lognorm.stanfit)$K[,5]), colour = 'blue')
lsos()
gc()
rm(list = ls())
coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowtoss.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowcoin.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

multiplemint.stanmodel <- stan_model(stan.file, verbose = TRUE)

stan.file <- 'multiplemint_hierarchical.stan'

multiplemint.stanmodel <- stan_model(stan.file, verbose = TRUE)
coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowtoss.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowcoin.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

source("lib.R")
coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowtoss.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowcoin.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

mint.mu <- c(0.48, 0.51, 0.47, 0.51, 0.53)
mint.K  <- c(1000,  750,  500, 1500, 4000)

coin.mean <-  50
coin.sd   <-  10

toss.mean <- 250
toss.sd   <-  50

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowtoss.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowcoin.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

multiplemint.lognorm.stanmodel <- stan_model(stan.file, verbose = TRUE)

stan.file <- 'multiplemint_lognormal_k.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

multiplemint.lognorm.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowtoss.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowcoin.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

warmup.count <- 250
sample.count <- 250
chain.count  <- 8

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 250
toss.sd   <-  50

multiple.lowtoss.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowtoss.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowtoss.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )


coin.mean <- 250
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.lowcoin.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.lowcoin.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.lowcoin.stanfit <- sampling(multiplemint.stanmodel
                                        ,data      = stan.data.lst
                                        ,algorithm = "NUTS"
                                        ,warmup    = warmup.count
                                        ,iter      = warmup.count + sample.count
                                        ,chains    = chain.count
                                        ,verbose   = TRUE
                                         )

lsos()
lsos()


ggplot() + geom_density(aes(x = extract(multiplemint.lowtoss.stanfit)$K[,1])) + geom_density(aes(x = extract(multiplemint.lowcoin.stanfit)$K[,1]), colour = 'red')
ggplot() + geom_density(aes(x = extract(multiplemint.lowtoss.stanfit)$K[,5])) + geom_density(aes(x = extract(multiplemint.lowcoin.stanfit)$K[,5]), colour = 'red')
warmup.count <- 250
sample.count <- 250
chain.count  <- 8

coin.mean <- 500
coin.sd   <-  50

toss.mean <- 1000
toss.sd   <-   50

multiple.more.dt <- generate.multiple.mint.data(mint.mu, mint.K, coin.mean, coin.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.more.dt[, .(mint.id, coin.id, toss.count, success)]

stan.data.lst <- list(n_mints  = inputdata.dt[, length(unique(mint.id))]
                     ,n_coins  = inputdata.dt[, length(unique(coin.id))]
                     ,trials   = inputdata.dt$toss.count
                     ,success  = inputdata.dt$success
                     ,mint_id  = inputdata.dt$mint.id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multiplemint.more.stanfit <- sampling(multiplemint.stanmodel
                                     ,data      = stan.data.lst
                                     ,algorithm = "NUTS"
                                     ,warmup    = warmup.count
                                     ,iter      = warmup.count + sample.count
                                     ,chains    = chain.count
                                     ,verbose   = TRUE
                                      )

knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
gc()
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
lsos()
inputdata.dt
q()
y
lsos()
rm(list = ls())
source("lib.R")
bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_coins = bttt_dt[, length(unique(coin_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(coin_full_stanfit) + expand_limits(y = c(0,1))

source("lib.R");



bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_coins = bttt_dt[, length(unique(coin_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(coin_full_stanfit) + expand_limits(y = c(0,1))

bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_coins = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

bttt_dt
setnames(bttt_dt, 'coin.id', 'trial_id')
bttt_dt
writeRDS(bttt_dt, file = 'binarytrial_twotest.rds', compress ='xz')
saveRDS(bttt_dt, file = 'binarytrial_twotest.rds', compress ='xz')
bttt_dt <- readRDS("binarytrial_twotest.rds")

bttt_
bttt_dt
stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_coins = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

rm(list = ls())
source("lib.R")
source("lib.R");



bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_coins = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

stan_data_lst <- list(n_trials   = trial5_dt[, length(unique(trial_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_tossvar_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_tossvar_stanfit <- sampling(trial_tossvar_stanmodel
                                 ,data      = stan_data_lst
                                 ,algorithm = "NUTS"
                                 ,warmup    = warmup_count
                                 ,iter      = warmup_count + sample_count
                                 ,chains    = chain_count
                                 ,verbose   = TRUE
                                  )

traceplot(trial_tossvar_stanfit) + expand_limits(y = c(0,1))

trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

source("lib.R")
trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

source("lib.R")
generate_trial_data
source("lib.R")
generate_trial_data
trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

trial5_dt
trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

stan_data_lst <- list(n_trials   = trial5_dt[, length(unique(trial_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_tossvar_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_tossvar_stanfit <- sampling(trial_tossvar_stanmodel
                                 ,data      = stan_data_lst
                                 ,algorithm = "NUTS"
                                 ,warmup    = warmup_count
                                 ,iter      = warmup_count + sample_count
                                 ,chains    = chain_count
                                 ,verbose   = TRUE
                                  )

traceplot(trial_tossvar_stanfit) + expand_limits(y = c(0,1))

trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

stan_data_lst <- list(n_trials   = trial5_dt[, length(unique(trial_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial5_dt
stan_data_lst <- list(n_trials   = trial5_dt[, length(unique(test_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_var_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_var_stanfit <- sampling(trial_var_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(trial_var_stanfit) + expand_limits(y = c(0,1))

stan_data_lst <- list(n_trials   = trial5_dt[, length(unique(test_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_var_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_var_stanfit <- sampling(trial_var_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(trial_var_stanfit) + expand_limits(y = c(0,1))

stan_data_lst <- list(n_trials   = trial5_dt[, length(unique(test_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_var_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_var_stanfit <- sampling(trial_var_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(trial_var_stanfit) + expand_limits(y = c(0,1))

trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

stan_data_lst <- list(n_tests    = trial5_dt[, length(unique(test_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_var_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_var_stanfit <- sampling(trial_var_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(trial_var_stanfit) + expand_limits(y = c(0,1))

binomial_05_dt <- generate_hierarchical_binomial_data(tests = 5)
binomial_50_dt <- generate_hierarchical_binomial_data(tests = 50)

binomial_alt_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_tests = binomial_05_dt[, length(unique(test_id))]
                     ,trials  = binomial_05_dt$trials
                     ,success = binomial_05_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

binomial_var05_stanfit <- sampling(binomial_alt_stanmodel
                                  ,data      = stan_data_lst
                                  ,algorithm = "NUTS"
                                  ,warmup    = warmup_count
                                  ,iter      = warmup_count + sample_count
                                  ,chains    = chain_count
                                  ,verbose   = TRUE
                                   )

traceplot(binomial_var05_stanfit) + expand_limits(y = c(0,1))



stan_data_lst <- list(n_tests = binomial_50_dt[, length(unique(test_id))]
                     ,trials  = binomial_50_dt$trials
                     ,success = binomial_50_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

binomial_var50_stanfit <- sampling(binomial_alt_stanmodel
                              ,data      = stan_data_lst
                              ,algorithm = "NUTS"
                              ,warmup    = warmup_count
                              ,iter      = warmup_count + sample_count
                              ,chains    = chain_count
                              ,verbose   = TRUE
                               )

traceplot(binomial_var50_stanfit) + expand_limits(y = c(0,1))

traceplot(binomial_var50_stanfit, pars = c("mu", "K")) + expand_limits(y = c(0,1))
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
q()
y
knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
q()
y
source("lib.R")
generate_multiple_hier_trial_data
generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
lsos()
gc()
addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
source("Lib.R")
source("lib.R")
addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
addata_dt
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
adddata_dt
addata_dt
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
addata_dt
addata_dt[, .N, by = test_id]
addata_dt[, .N, by = test_id][, sum(N)]
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
addata_dt
addata_dt[, sum(success) / sum(trial_count)]
addata_dt[, mean(theta)]
addata_dt
lsos()
 source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
source("lib.R"); addata_dt <- generate_multiple_hier_trial_data(mu = c(0.15, 0.12, 0.10, 0.11, 0.16), K = c(250, 600, 150, 500, 200))
source("lib.R"); addata_dt <- generate_multiple_hier_trial_data()
addata_dt
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
source("lib.R")
set.seed(42)

prod.mu <- c(0.18, 0.11, 0.13, 0.16, 0.15)
prod.K  <- c( 200,  250,  150,  200,  400)

design.mean <-  50
design.sd   <-  10

toss.mean <- 250
toss.sd   <-  50

multiple.dt  <- generate.multiple.prod.data(prod.mu, prod.K, design.mean, design.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.dt[, .(prod.id, design.id, toss.count, success)]

bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_coins = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

bttt_dt
bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)

bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_tests = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

trial5_dt <- generate_trial_data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                                ,c( 50,  100,   75,  125,  150))

stan_data_lst <- list(n_tests    = trial5_dt[, length(unique(test_id))]
                     ,trials     = trial5_dt$trials
                     ,success    = trial5_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

trial_var_stanmodel <- stan_model(stan_file, verbose = TRUE)


trial_var_stanfit <- sampling(trial_var_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(trial_var_stanfit) + expand_limits(y = c(0,1))

binomial_05_dt <- generate_hierarchical_binomial_data(tests = 5)
binomial_50_dt <- generate_hierarchical_binomial_data(tests = 50)

binomial_alt_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_tests = binomial_05_dt[, length(unique(test_id))]
                     ,trials  = binomial_05_dt$trials
                     ,success = binomial_05_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

binomial_var05_stanfit <- sampling(binomial_alt_stanmodel
                                  ,data      = stan_data_lst
                                  ,algorithm = "NUTS"
                                  ,warmup    = warmup_count
                                  ,iter      = warmup_count + sample_count
                                  ,chains    = chain_count
                                  ,verbose   = TRUE
                                   )

traceplot(binomial_var05_stanfit) + expand_limits(y = c(0,1))



stan_data_lst <- list(n_tests = binomial_50_dt[, length(unique(test_id))]
                     ,trials  = binomial_50_dt$trials
                     ,success = binomial_50_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

binomial_var50_stanfit <- sampling(binomial_alt_stanmodel
                              ,data      = stan_data_lst
                              ,algorithm = "NUTS"
                              ,warmup    = warmup_count
                              ,iter      = warmup_count + sample_count
                              ,chains    = chain_count
                              ,verbose   = TRUE
                               )

traceplot(binomial_var50_stanfit) + expand_limits(y = c(0,1))

lsos()
set.seed(42)

prod.mu <- c(0.18, 0.11, 0.13, 0.16, 0.15)
prod.K  <- c( 200,  250,  150,  200,  400)

design.mean <-  50
design.sd   <-  10

toss.mean <- 250
toss.sd   <-  50

multiple.dt  <- generate.multiple.prod.data(prod.mu, prod.K, design.mean, design.sd, toss.mean, toss.sd)
inputdata.dt <- multiple.dt[, .(prod.id, design.id, toss.count, success)]

rm(list = ls())
source("lib.R")
lsos()
lsos()
set.seed(42)

prod_mu <- c(0.18, 0.11, 0.13, 0.16, 0.15)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id, design_id, trial_count, success)]

multiple_dt
multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

inputdata_dt
set.seed(42)

prod_mu <- c(0.18, 0.11, 0.13, 0.16, 0.15)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

inputdata_dt
stan_file <- 'multipleprod_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_prods    = inputdata_dt[, length(unique(prod_id))]
                     ,n_designs  = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_prods    = inputdata_dt[, length(unique(prod_id))]
                     ,n_designs  = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_prods    = inputdata_dt[, length(unique(prod_id))]
                     ,n_designs  = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trialss  = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,prod_id    = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

set.seed(42)

prod_mu <- c(0.18, 0.11, 0.13, 0.16, 0.15)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

inputdata_dt
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

 q()
y

set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

source("lib.R");


set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

multiple_dt
inputdata_dt
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

lsos()
traceplot(multipleprod_stan)
traceplot(multipleprod_stanfit)
extract(multipleprod_stanfit)
str(extract(multipleprod_stanfit))
traceplot(multipleprod_stanfit, pars = c("mu", "K", "theta"))
traceplot(multipleprod_stanfit, pars = c("mu", "K"))
1.1 / 0.0011
stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

traceplot(multipleprod_stanfit, pars = c("mu", "K"))
extract(multipleprod_stanfit)
extract(multipleprod_stanfit)$mu
melt(extract(multipleprod_stanfit)$mu)
ggplot() + geom_density(aes(x = value, colour=Var2), data = melt(extract(multipleprod_stanfit)$mu))
melt(extract(multipleprod_stanfit)$mu)
melt(extract(multipleprod_stanfit)$mu)[1:100]
melt(extract(multipleprod_stanfit)$mu)[1:3,]
melt(extract(multipleprod_stanfit)$mu)[1:10,]
ggplot() + geom_density(aes(x = value, group=Var2, colour=Var2), data = melt(extract(multipleprod_stanfit)$mu))
ggplot() + geom_density(aes(x = value, group=Var2, colour=as.character(Var2)), data = melt(extract(multipleprod_stanfit)$mu))
inputdata_dt
inputdata_dt[, .(trial = sum(trial_count), correct = sum(success)), by = prod_id]
inputdata_dt[, .(trial = sum(trial_count), correct = sum(success)), by = prod_id][, .(prod_id, rec = correct / trial)]
inputdata_dt[prod_id == 1]
ggplot()+ geom_density(aes(x = success/trial_count), data = inputdata_dt[prod_id == 1])
prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

prod_mu
inputdata_dt
inputdata_dt[, .(trial = sum(trial_count), correct = sum(success)), by = prod_id][, .(prod_id, rec = correct / trial)]
multiple_dt
multiple_dt[cat_id == 5]
?mapply
prod_mu
prod_K
multiple_dt
source("lib.R")
lsos()
generate_multiple_hier_trial_data
multiple_dt
multiple_dt$success
source("lib.R");



set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

source("lib.R");



set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

multiple_dt
        print(theta); print(trial_count)


source("lib.R")



set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

multiple_dt
inputdata_dt
ggplot()+ geom_density(aes(x = success/trial_count), data = inputdata_dt[prod_id == 1])
ggplot()+ geom_density(aes(x = success/trial_count, colour = prod_id), data = inputdata_dt)
ggplot()+ geom_density(aes(x = success/trial_count, colour = as.character(prod_id)), data = inputdata_dt)
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )


traceplot(multipleprod_stanfit, pars = c("mu", "K"))
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

traceplot(multipleprod_stanfit, pars = c("mu", "K"))
monitor(multipleprod_stanfit)
inputdata_dt[prod_id == 2]
inputdata_dt[prod_id == 5]
inputdata_dt[prod_id == 2]
inputdata_dt[prod_id == 2]
multiple_dt
multiple_dt[cat_id == 2]
inputdata_dt[prod_id == 2]
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 500
sample_count <- 500
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.0011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

traceplot(multipleprod_stanfit, pars = c("mu", "K"))
monitor(multipleprod_stanfit)
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

traceplot(multipleprod_stanfit, pars = c("mu", "K"))
monitor(multipleprod_stanfit)
warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

rm(list = ls())
lsos()
source("lib.R")



set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]






stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

gc()
multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

source("lib.R")



set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

inputdata_dt
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

library(rstan)
multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)
multipleprod_stanmodel
lsos()
detach(package:rstan)
library(rstan)
rstan::stan_model
lsos()
multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

multipleprod_stanmodel
rm(list = ls())
q()
y
lsos()
source("lib.R")



set.seed(42)

prod_mu <- c(0.08, 0.11, 0.09, 0.11, 0.10)
prod_K  <- c( 200,  250,  150,  200,  400)

design_mean <-  50
design_sd   <-  10

trial_mean <- 250
trial_sd   <-  50

multiple_dt  <- generate_multiple_hier_trial_data(prod_mu, prod_K, design_mean, design_sd, trial_mean, trial_sd)
inputdata_dt <- multiple_dt[, .(prod_id = cat_id, design_id = trial_id, trial_count, success)]

inputdata_dt
stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )


stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )


stan_file <- 'multicat_hierarchical.stan'

warmup_count <- 250
sample_count <- 250
chain_count  <- 8

multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )


standata_lst
lsos()
stan_data_lst
multipleprod_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_data_lst <- list(n_cats     = inputdata_dt[, length(unique(prod_id))]
                     ,n_trials   = inputdata_dt[, length(unique(design_id))]
                     ,trials     = inputdata_dt$trial_count
                     ,success    = inputdata_dt$success
                     ,cat_id     = inputdata_dt$prod_id
                     ,priorShape = 1.1
                     ,priorRate  = 0.011
                     ,priorA     = 2
                     ,priorB     = 2
                      )

multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

source("run_temp.R", echo = TRUE)
stan_data_lst
str(stan_data_lst)
unique(stan_data_lst$cat_id)
stan_data_lst$cat_id
multipleprod_stanfit <- sampling(multipleprod_stanmodel
                                ,data      = stan_data_lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup_count
                                ,iter      = warmup_count + sample_count
                                ,chains    = chain_count
                                ,verbose   = TRUE
                                 )

source("run_temp.R", echo = TRUE)
extract(multipleprod_stanfit)
str(extract(multipleprod_stanfit))
extract(multipleprod_stanfit)$mintheta[,1]
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,1]))
inputdata_dt
inputdata_dt[, .(mintheta = min(success/trial_count)), by = prod_id]
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,1])) + geom_vhline(aes(xintercept = inputdata_dt[prod_id == 1, min(success/trial_count), by = prod_id]
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,1])) + geom_vhline(aes(xintercept = inputdata_dt[prod_id == 1, min(success/trial_count), by = prod_id]))
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,1])) + geom_vline(aes(xintercept = inputdata_dt[prod_id == 1, min(success/trial_count), by = prod_id]))
?geom_vline
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,1])) + geom_vline(xintercept = inputdata_dt[prod_id == 1, min(success/trial_count), by = prod_id])
inputdata_dt
inputdata_dt[prod_id == 1, min(success/trial_count)]
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,1])) + geom_vline(xintercept = inputdata_dt[prod_id == 1, min(success/trial_count)])
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,2])) + geom_vline(xintercept = inputdata_dt[prod_id == 2, min(success/trial_count)], colour = 'red')
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$mintheta[,3])) + geom_vline(xintercept = inputdata_dt[prod_id == 3, min(success/trial_count)], colour = 'red')
ggplot() + geom_density(aes(x = extract(multipleprod_stanfit)$maxtheta[,3])) + geom_vline(xintercept = inputdata_dt[prod_id == 3, max(success/trial_count)], colour = 'red')
q()
y
lsos()
q()
n
source("lib.R");



bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_tests = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

library(knitr);
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
lsos()
rm(list = ls())
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
plot_dt <- rbind(data.table(label = 'Beta(5,5)',   theta = theta_seq, density = beta_05_05)
                ,data.table(label = 'Beta(50,50)', theta = theta_seq, density = beta_50_50))

ggplot(plot_dt) +
    geom_line(aes(x = theta, y = density, colour = label)

theta_seq <- seq(0, 1, by = 0.001)

beta_05_05 <- dbeta(theta_seq, 5, 5)
beta_50_50 <- dbeta(theta_seq, 5, 5)

plot_dt <- rbind(data.table(label = 'Beta(5,5)',   theta = theta_seq, density = beta_05_05)
                ,data.table(label = 'Beta(50,50)', theta = theta_seq, density = beta_50_50))

ggplot(plot_dt) +
    geom_line(aes(x = theta, y = density, colour = label)

theta_seq <- seq(0, 1, by  =0.001)
theta_seq <- seq(0, 1, by  =0.001)
theta_seq <- seq(0, 1, by = 0.001)
theta_seq
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
theta_seq <- seq(0, 1, by = 0.001)

beta_05_05 <- dbeta(theta_seq, 5, 5)
beta_50_50 <- dbeta(theta_seq, 5, 5)

plot_dt <- rbind(data.table(label = 'Beta(5,5)',   theta = theta_seq, density = beta_05_05)
                ,data.table(label = 'Beta(50,50)', theta = theta_seq, density = beta_50_50))

ggplot(plot_dt) +
    geom_line(aes(x = theta, y = density, colour = label)

library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
?dgamma
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
mean(rgamma(10000, shape = 10, rate = 1))
mean(rgamma(10000, shape = 100, rate = 10))
ggplot() + geom_line(aes(x = seq(0,20,0.01), dgamma(seq(0,20,0.01), shape = 10, rate = 1)))
?dgamma
ggplot() + geom_line(aes(x = seq(0,1,0.001), qgamma(seq(0,1,0.001), shape = 10, rate = 1)))
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
lsos()
rm(list = ls())
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
lsos()
rm(list = ls())
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
lsos()
gc()
lsos()
source("lib.R");



bttt_dt <- readRDS("binarytrial_twotest.rds")

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

stan_data_lst <- list(n_tests = bttt_dt[, length(unique(trial_id))]
                     ,trials  = bttt_dt$trials
                     ,success = bttt_dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

bttt_full_stanmodel <- stan_model(stan_file, verbose = TRUE)


bttt_full_stanfit <- sampling(bttt_full_stanmodel
                             ,data      = stan_data_lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup_count
                             ,iter      = warmup_count + sample_count
                             ,chains    = chain_count
                             ,verbose   = TRUE
                              )

traceplot(bttt_full_stanfit) + expand_limits(y = c(0,1))

source("wsexercise.6", echo = TRUE)
source("wsexercise.6.R", echo = TRUE)

monitor(bttt_full_stanfit, probs = c(0.1,0.5,0.9))
traceplot(bttt_full_stanfit, pars = c("mu", "theta", "K")) + expand_limits(y = c(0,1))

bttt_dt
if(save_rds_files) saveRDS(bttt_full_stanfit, file = 'bttt_full_stanfit.rds', compress = 'xz')

if(exists(save_rds_files)) print("Woohoo")
if(exists("save_rds_files")) print("Woohoo")
if(exists("save_rds_files") & save_rds_files) print("Woohoo")
lsos()
save_rds_files <- TRUE
source("wsexercise.6.R", echo = TRUE)
monitor(bttt_full_stanfit, probs = c(0.1,0.5,0.9))
traceplot(bttt_full_stanfit, pars = c("mu", "theta", "K")) + expand_limits(y = c(0,1))

monitor(bttt_full_stanfit, probs = c(0.1,0.5,0.9), digits_summary = 3)
monitor(trial_var_stanfit, probs = c(0.1,0.5,0.9))
traceplot(trial_var_stanfit, pars = c("mu", "theta", "K")) + expand_limits(y = c(0,1))

monitor(binomial_var05_stanfit, probs = c(0.1,0.5,0.9))
traceplot(binomial_var05_stanfit, pars = c("mu", "theta", "K")) + expand_limits(y = c(0,1))

monitor(binomial_var05_stanfit, probs = c(0.1,0.5,0.9))
traceplot(binomial_var05_stanfit, pars = c("mu", "K")) + expand_limits(y = c(0,1))


monitor(binomial_var05_stanfit, probs = c(0.1,0.5,0.9), digits_summary=3)

traceplot(binomial_var05_stanfit, pars = c("mu", "K")) + expand_limits(y = c(0,1))

monitor(binomial_var50_stanfit, probs = c(0.1,0.5,0.9))
traceplot(binomial_var50_stanfit, pars = c("mu", "K")) + expand_limits(y = c(0,1))

monitor(binomial_var50_stanfit, probs = c(0.1,0.5,0.9), digits_summary=3)

traceplot(binomial_var50_stanfit, pars = c("mu", "K")) + expand_limits(y = c(0,1))

binomial_05_dt
binomial_50_dt
q()
y
lsos()
lsos()
exp(0.0040 * 12)
lsos()
 rm(list = ls())
source("lib.R")
binomial_050_dt <- generate_hierarchical_binomial_data(tests = 50,  total_trials = 2500)
binomial_500_dt <- generate_hierarchical_binomial_data(tests = 500, total_trials = 2500)

binomial_alt_stanmodel <- stan_model(stan_file, verbose = TRUE)

stan_file <- 'binarytrial_full.stan'

warmup_count <- 250
sample_count <- 1000
chain_count  <- 8

binomial_050_dt <- generate_hierarchical_binomial_data(tests = 50,  total_trials = 2500)
binomial_500_dt <- generate_hierarchical_binomial_data(tests = 500, total_trials = 2500)

binomial_alt_stanmodel <- stan_model(stan_file, verbose = TRUE)

standata_lst <- list(n_tests = binomial_050_dt[, length(unique(test_id))]
                    ,trials  = binomial_050_dt$trials
                    ,success = binomial_050_dt$success
                    ,priorShape = 10
                    ,priorRate  = 1
                     )

binomial_var05_stanfit <- sampling(binomial_alt_stanmodel
                                  ,data      = standata_lst
                                  ,algorithm = "NUTS"
                                  ,warmup    = warmup_count
                                  ,iter      = warmup_count + sample_count
                                  ,chains    = chain_count
                                  ,verbose   = TRUE
                                   )

lsos()
rm(list = ls())
save_rds_files <- TRUE
source("wsexercise.6.R", echo = TRUE)
lsos()
source("wsexercise.6.R", echo = TRUE)
source("wsexercise.6.R", echo = TRUE)
lsos()
rm(list = ls())
source("wsexercise.6.R", echo = TRUE)
q()
y
