setwd("~/githubrepos/dublin_r_workshops/bdaworkshop2013")
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 2, 2), geom = 'line')
library(ggplot2)
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 2, 2), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 5, 5), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 50, 50), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 2, 2), geom = 'line')
likelihood <- function(theta, n, k) { return(theta^k + (1-theta)^(n-k))}
likelihood(0.4, 5, 3)
likelihood(0.2, 5, 3)
likelihood(0.1, 5, 3)
qplot(seq(0, 1, by = 0.001), likelihood(seq(0, 1, by = 0.001), 5, 3), geom = 'line')
likelihood(0, 5, 3)
likelihood <- function(theta, n, k) { return(theta^k * (1-theta)^(n-k))}
qplot(seq(0, 1, by = 0.001), likelihood(seq(0, 1, by = 0.001), 5, 3), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 50, 50), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 5, 5), geom = 'line')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 5, 5), geom = 'line') + geom_line(aes(y = dbeta(seq(0, 1, by = 0.01), 5 + 42, 5 + 58)), colour = 'red')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 7, 3), geom = 'line') + geom_line(aes(y = dbeta(seq(0, 1, by = 0.01), 5 + 42, 5 + 58)), colour = 'red')
qplot(seq(0, 1, by = 0.01), dbeta(seq(0, 1, by = 0.01), 7, 3), geom = 'line') + geom_line(aes(y = dbeta(seq(0, 1, by = 0.01), 7 + 42, 3 + 58)), colour = 'red')
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
knit2pdf("wsbda201603_worksheet.Rnw")
q()
y
source("wsexercise.2.R")
lsos()
qplot(theta.seq, beta0101.posterior, geom = 'line', xlim = c(0.60, 0.75)) +
    geom_line(aes(y = beta1005.posterior), color = 'red')

cointoss1000 <- readRDS("cointoss1000.rds");

H.count <- sum(cointoss1000);
T.count <- length(cointoss1000) - H.count;

beta0101.posterior <- dbeta(theta.seq, 1 + H.count, 1 + T.count);

qplot(theta.seq, beta0101, geom = 'line') + geom_line(aes(y = beta0101.posterior), color = 'red')


beta0202.posterior <- dbeta(theta.seq, 2 + H.count, 2 + T.count);

qplot(theta.seq, beta0202,           geom = 'line') + geom_line(aes(y = beta0202.posterior), color = 'red')
qplot(theta.seq, beta0101.posterior, geom = 'line') + geom_line(aes(y = beta0202.posterior), color = 'red')


beta1010.posterior <- dbeta(theta.seq, 10 + H.count, 10 + T.count);

qplot(theta.seq, beta1010,           geom = 'line') + geom_line(aes(y = beta1010.posterior), color = 'red')
qplot(theta.seq, beta0101.posterior, geom = 'line') + geom_line(aes(y = beta1010.posterior), color = 'red')


beta1005.posterior <- dbeta(theta.seq, 10 + H.count, 5 + T.count);

qplot(theta.seq, beta1005,           geom = 'line') + geom_line(aes(y = beta1005.posterior), color = 'red')
qplot(theta.seq, beta0101.posterior, geom = 'line') + geom_line(aes(y = beta1005.posterior), color = 'red')

qplot(theta.seq, beta1005,           geom = 'line') + geom_line(aes(y = beta1005.posterior), color = 'red')

qplot(theta.seq, beta0101.posterior, geom = 'line', xlim = c(0.50, 0.75)) +
    geom_line(aes(y = beta1005.posterior), color = 'red')

qplot(theta.seq, beta0101.posterior, geom = 'line', xlim = c(0.55, 0.70)) +
    geom_line(aes(y = beta1005.posterior), color = 'red')

lsos()
rm(list = ls())
source("wsexercise.2.R")
lsos()
qplot(theta.seq, beta0101.10.posterior, geom = 'line', xlim = c(0.50, 0.75)) +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

qplot(theta.seq, beta0101.10.posterior, geom = 'line', xlim = c(0.25, 0.75)) +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

qplot(theta.seq, beta0101.10.posterior, geom = 'line', xlim = c(0.1, 0.9)) +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

qplot(theta.seq, beta0101, geom = 'line', xlim = c(0.1, 0.9)) +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.0505.plot <- qplot(theta.seq, beta0505, geom = 'line') +
    geom_line(aes(y = beta0505.10.posterior), color = 'red')

N1000.0505.plot <- qplot(theta.seq, beta0505, geom = 'line') +
    geom_line(aes(y = beta0505.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.0505.plot, N1000.0505.plot, nrow = 2)

source("wsexercise.2.R")
N10.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.10.posterior), color = 'red')

N1000.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2) 

    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N10.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.10.posterior), color = 'red')

N1000.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)

N10.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.10.posterior), color = 'red')

N1000.0101.plot <- qplot(theta.seq, beta0101, geom = 'line') +
    geom_line(aes(y = beta0101.1000.posterior), color = 'red')

N10.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.10.posterior), color = 'red')

N1000.1010.plot <- qplot(theta.seq, beta1010, geom = 'line') +
    geom_line(aes(y = beta1010.1000.posterior), color = 'red')

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)

grid.arrange(N10.0101.plot, N1000.0101.plot, N10.1010.plot, N1000.1010.plot, nrow = 2)
source("wsexercise.2.R")
rm(list = ls())
source("wsexercise.3.R")
qplot(theta.seq, posterior.numerical, geom = 'line') + geom_line(aes(y = posterior.analytic), color = 'red')

biased.prior <- ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq)
qplot(theta.seq, biased.prior, geom = 'line')
biased.prior <- 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq)
qplot(theta.seq, biased.prior, geom = 'line')
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
qplot(theta.seq, biased.prior, geom = 'line')



biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)

qplot(theta.seq, biased.prior, geom = 'line')

diff(theta.seq)
sum(biased.prior * theta.seq)
sum(biased.prior * 0.001)
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')

biased.posterior <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

biased.prior.2     <- 0.5 * (dbeta(theta.seq, 250, 750) + dbeta(theta.seq, 750, 250))
qplot(theta.seq, biased.prior.2, geom = 'line')

biased.posterior.2 <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

biased.posterior.2 <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.2, geom = 'line') + geom_line(aes(y = biased.posterior.2), color = 'red')

biased.posterior.2 <- calculate.posterior.density(biased.prior.2, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.2, geom = 'line') + geom_line(aes(y = biased.posterior.2), color = 'red')

biased.prior.2     <- 0.5 * (dbeta(theta.seq, 25, 75) + dbeta(theta.seq, 75, 25))
qplot(theta.seq, biased.prior.2, geom = 'line')

biased.posterior.2 <- calculate.posterior.density(biased.prior.2, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.2, geom = 'line') + geom_line(aes(y = biased.posterior.2), color = 'red')

biased.prior.3     <- 0.5 * (dbeta(theta.seq, 250, 750) + dbeta(theta.seq, 750, 250))
qplot(theta.seq, biased.prior.3, geom = 'line')

biased.posterior.3 <- calculate.posterior.density(biased.prior.3, cointoss10, theta.seq)
qplot(theta.seq, biased.prior.3, geom = 'line') + geom_line(aes(y = biased.posterior.3), color = 'red')

d0 <- theta.seq[2] - theta.seq[1]

part.1 <- pmax(0, 0.25 + ifelse(theta.seq <= 0.25, theta.seq - 0.25, 0.25 - theta.seq))
part.2 <- rev(part.one)
part.3 <- pmax(0, 0.50 + ifelse(theta.seq <= 0.50, theta.seq - 0.50, 0.50 - theta.seq))

threeposs.prior <- part.1 + part.2 + part.3
threeposs.prior <- threeposs.prior / sum(threeposs.prior * d0)

qplot(theta.seq, threeposs.prior, geom = 'line')

d0 <- theta.seq[2] - theta.seq[1]

part.1 <- pmax(0, 0.25 + ifelse(theta.seq <= 0.25, theta.seq - 0.25, 0.25 - theta.seq))
part.2 <- rev(part.one)
part.3 <- pmax(0, 0.50 + ifelse(theta.seq <= 0.50, theta.seq - 0.50, 0.50 - theta.seq))

d0 <- theta.seq[2] - theta.seq[1]

part.1 <- pmax(0, 0.25 + ifelse(theta.seq <= 0.25, theta.seq - 0.25, 0.25 - theta.seq))
part.2 <- rev(part.1)
part.3 <- pmax(0, 0.50 + ifelse(theta.seq <= 0.50, theta.seq - 0.50, 0.50 - theta.seq))

threeposs.prior <- part.1 + part.2 + part.3
threeposs.prior <- threeposs.prior / sum(threeposs.prior * d0)

qplot(theta.seq, threeposs.prior, geom = 'line')

threeposs.posterior <- calculate.posterior.density(threeposs.prior, cointoss10, theta.seq)
qplot(theta.seq, threeposs.prior, geom = 'line') + geom_line(aes(y = threeposs.posterior), color = 'red')

source("lib.R")
lsos()
source("wsexercise.4.R")
source("wsexercise.4.R")
hier.posterior
str(hier.posterior)
hier.posterior[1:4, 1:10]
source("wsexercise.4.R")
hier.posterior[1:4, 1:10]
hier.posterior[!is.na(hier.posterior)]
hier.posterior[is.na(hier.posterior)]
qplot(mu.seq, mu.prior, geom = 'line')
source("wsexercise.4.R")
qplot(mu.seq, mu.prior, geom = 'line')
hier.posterior
qplot(hier.posterior, geom = 'density2d')
melt(hier.posterior)
qplot(theta.seq[Var1], mu.seq[Var2], data = melt(hier.posterior), geom = 'density2d')
source("wsexercise.4.R")
qplot(theta.seq[Var1], mu.seq[Var2], data = melt(hier.posterior), geom = 'density2d')
q()
y
lsos()
rm(list = ls())
source("wsexercise.4.R")
str(hier.posterior)
melt(hier.posterior)
qplot(Var1, Var2, value, data = melt(hier.posterior), geom = 'density2d')
melt(hier.posterior)
data.table(melt(hier.posterior))
qplot(Var1, Var2, value, data = melt(hier.posterior), geom = 'density2d')
qplot(Var1, Var2, value, data = data.table(melt(hier.posterior)), geom = 'density2d')
data.table(melt(hier.posterior))[is.na(value)]
data.table(melt(hier.posterior))[is.na(Var1)]
geom_density2d
?geom_density2d
qplot(Var1, Var2, geom = melt(hier.posterior), colour = value)
qplot(Var1, Var2, geom = melt(hier.posterior), geom = 'point', colour = value)
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value)
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.1), alpha = I(0.1))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.3), alpha = I(0.1))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.3), alpha = I(0.5))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, size = I(0.3))
qplot(Var1, Var2, data = melt(hier.posterior), geom = 'point', colour = value, alpha = I(0.3))
qplot(theta.seq[Var1], mu.seq[Var2], data = melt(hier.posterior), geom = 'point', colour = value, alpha = I(0.3))
qplot(theta.seq[Var1], mu.seq[Var2], value, data = melt(hier.posterior), geom = 'contour')
qplot(theta.seq[Var1], mu.seq[Var2], value, data = melt(hier.posterior), geom = 'contour2d')
geom_contour
?geom_contour
ggplot(melt(hier.posterior), aes(x = Var1, y = Var2, z = value)) + geom_contour()
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour')
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour', xlim = c(0, 1))
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour', xlim = c(0, 1), ylim = c(0, 1))
source("wsexercise.4.R")
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour', xlim = c(0, 1), ylim = c(0, 1))
qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior), geom = 'contour'
    ,xlim = c(0, 1), ylim = c(0, 1), xlab = expression(theta), ylab = expression(mu))

d0  <- 0.005
dmu <- 0.005

theta.seq <- seq(0 + d0,  1 - d0, by = d0)
mu.seq    <- seq(0 + dmu, 1 - dmu, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 100


hier.posterior.100 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.100), geom = 'contour'
    ,xlim = c(0, 1), ylim = c(0, 1), xlab = expression(theta), ylab = expression(mu))



lsos()
source("wsexercise.4.R")
source("wsexercise.4.R")
lsos()
rm(list = ls())
q()
y
source("wsexercise.5.R")
lsos()
cointoss10
rm(list = ls())
source("wsexercise.5.R")
source("wsexercise.5.R")
source("wsexercise.5.R")
source("wsexercise.5.R")
source("wsexercise.5.R")
coin.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.stanfit <- sampling(coin.stanmodel
                        ,data      = stan.data.lst
                        ,algorithm = "NUTS"
                        ,warmup    = warmup.count
                        ,iter      = warmup.count + sample.count
                        ,chains    = chain.count
                        ,verbose   = TRUE
                         )

traceplot(coin.stanfit)
traceplot(coin.stanfit, inc_warmup = FALSE)
traceplot(coin.stanfit, inc_warmup = TRUE)
extract(coin.stanfit)$theta
qplot(extract(coin.stanfit)$theta, geom = 'density', xlim = c(0, 1))
qplot(extract(coin.stanfit)$theta, geom = 'density', xlim = c(0, 1)) + geom_line(aes(x = seq(0, 1, by = 0.001), y = dbeta(seq(0, 1, by = 0.001), 2, 2)), color = 'red')
theta.seq <- seq(0, 1, by = 0.001)
H.10.count <- sum(cointoss10)
T.10.count <- length(cointoss10) - H.10.count

beta.prior.0202 <- dbeta(theta.seq, 2, 2)
beta.posterior  <- dbeta(theta.seq, 2 + H.10.count, 2 + T.10.count)


qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0202), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue')
qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0202), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue') +
    xlab(expression(theta))

stan.file <- 'singlemint_singlecoin_flexible.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(y      = cointoss10
                     ,N      = length(cointoss10)
                     ,priorA = 5
                     ,priorB = 5
                      )

coin.flex.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.flex.stanfit <- sampling(coin.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

stan.data.lst
beta.prior.0505 <- dbeta(theta.seq, 5, 5)
beta.posterior  <- dbeta(theta.seq, 5 + H.10.count, 5 + T.10.count)


qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0505), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue') +
    xlab(expression(theta))


                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

beta.prior.0505 <- dbeta(theta.seq, 5, 5)
beta.posterior  <- dbeta(theta.seq, 5 + H.10.count, 5 + T.10.count)


qplot(extract(coin.stanfit)$theta, geom = 'density') +
    geom_line(aes(x = theta.seq, y = beta.prior.0505), colour = 'red') +
    geom_line(aes(x = theta.seq, y = beta.posterior),  colour = 'blue') +
    xlab(expression(theta))

tracetraceplot(coin.stanfit)

traceplot(coin.stanfit)

?traceplot
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
library(knitr); knit2pdf("wsbda201603_worksheet.Rnw")
q(0
q()
y
source("wsexercise.1.R", echo = TRUE)
false.alarm.seq <- seq(0, 0.1, by = 0.0005)

infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 1000000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

source("lib.R")



diseasedata.dt <- generate.disease.test.data(n           = 100000
                                            ,prior.prob  = 0.001
                                            ,hit.rate    = 0.99
                                            ,false.alarm = 0.05)


calculate.disease.test.probabilities(diseasedata.dt)



infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 1000000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

false.alarm.seq <- seq(0, 0.1, by = 0.0005)

infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 100000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 1000000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')



infected.prob <- sapply(false.alarm.seq, function(iter.fa) {
    data.dt <- generate.disease.test.data(n           = 100000
                                         ,prior.prob  = 0.001
                                         ,hit.rate    = 0.99
                                         ,false.alarm = iter.fa)

    calculate.disease.test.probabilities(data.dt)[infected == 1, prop]
})

qplot(false.alarm.seq, infected.prob, geom = 'line')

getwd()
q()
y
source("lib.R")
biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))
biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')

theta.seq <- seq(0, 1, by = 0.001)

biased.prior <- pmax(0, 0.25 + ifelse(theta.seq < 0.25, theta.seq - 0.25, 0.25 - theta.seq))

biased.prior <- biased.prior + rev(biased.prior)
biased.prior <- biased.prior / sum(biased.prior * (theta.seq[2] - theta.seq[1]))

qplot(theta.seq, biased.prior, geom = 'line')

weird.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 50000), rep(0, 50000)), theta.seq)
biased.prior
theta.seq
cointoss10
cointoss10 <- readRDS("cointoss10.rds")

cointoss10
c(rep(1, 50000), rep(0, 50000))
calculate.posterior.density
weird.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 50000), rep(0, 50000)), theta.seq)
weird.posterior
biased.posterior <- calculate.posterior.density(biased.prior, cointoss10, theta.seq)
qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

test <- c(rep(1,50000), rep(0,50000))

qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

test
str(test)
biased.posterior

qplot(theta.seq, biased.prior, geom = 'line') + geom_line(aes(y = biased.posterior), color = 'red')

biased.posterior <- calculate.posterior.density(biased.prior, test, theta.seq)
qplot(theta.seq, biased.posterior, geom = 'line')
biased.posterior[1:100]
biased.posterior[300:400]
biased.posterior[is.nan(biased.posterior)]
biased.posterior[!is.nan(biased.posterior)]
biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 10000), rep(0, 10000)), theta.seq)
source("lib.R"); biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 10000), rep(0, 10000)), theta.seq)
source("lib.R"); biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1, 10000), rep(0, 10000)), theta.seq)
calculate.data.probability
calculate.data.probability(c(rep(1, 10000), rep(0, 10000)), 0.5)
calculate.data.probability(c(rep(1, 5000), rep(0, 5000)), 0.5)
calculate.data.probability(c(rep(1, 50), rep(0, 50)), 0.5)
calculate.data.probability(c(rep(1, 10), rep(0, 10)), 0.5)
calculate.data.probability
calculate.likelihood
calculate.likelihood(1, 0.5)
calculate.likelihood(1, 0.25)
calculate.data.probability(c(rep(1, 10), rep(0, 10)), 0.5)
calculate.data.probability
calculate.data.probability(c(rep(1,5), rep(0, 5)), 0.5)
c(rep(1,5), rep(0,5))
calculate.data.probability(c(rep(1,5), rep(0, 5)), 0.2)
calculate.data.probability
calculate.data.probability(c(rep(1,5), rep(0, 5)), c(0.3,0.4))
calculate.data.probability(c(rep(1,5), rep(0, 5)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,5000), rep(0, 5000)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,500), rep(0, 500)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,1000), rep(0, 1000)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,750), rep(0, 750)), seq(0,1,by = 0.1))
calculate.data.probability(c(rep(1,500), rep(0, 500)), seq(0,1,by = 0.1))
source("lib.R"); calculate.data.probability(c(rep(1,500), rep(0, 500)), seq(0,1,by = 0.1))
source("lib.R"); calculate.data.probability(c(rep(1,1000), rep(0, 1000)), seq(0,1,by = 0.1))
source("lib.R"); calculate.data.probability(c(rep(1,800), rep(0, 800)), seq(0,1,by = 0.1))
biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1,500),rep(0,500)), theta.seq)
qplot(theta.seq, biased.posterior, geom = 'line')
qplot(theta.seq, biased.posterior, geom = 'line', xlim = c(0.4, 0.6))
biased.posterior <- calculate.posterior.density(biased.prior, c(rep(1,600),rep(0,600)), theta.seq)
calculate.data.probability
getwd()
q()
y
source("lib.R")
lsos()
cointoss10 <- readRDS("cointoss10.rds")

d0  <- 0.005
dmu <- 0.005

theta.seq <- seq(0 + d0,  1 - d0, by = d0)
mu.seq    <- seq(0 + dmu, 1 - dmu, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 5


hier.posterior.5 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

hier.5.plot <- qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.5)
                    ,geom = 'contour', xlim = c(0,1), ylim = c(0,1)
                    ,xlab = expression(theta), ylab = expression(mu))

plot(hier.5.plot)
source("wsexercise.4.R", echo = TRUE)
plot(hier.5.plot)
plot(hier.100.plot)
hier.posterior.100
head(hier.posterior.100)
str(hier.posterior.100)
d0  <- 0.001
dmu <- 0.001

theta.seq <- seq(0, 1, by = d0)
mu.seq    <- seq(0, 1, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 5


hier.posterior.5 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

hier.5.plot <- qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.5)
                    ,geom = 'contour', xlim = c(0,1), ylim = c(0,1)
                    ,xlab = expression(theta), ylab = expression(mu))

plot(hier.5.plot)
str(hier.5.plot)
str(hier.posterior.5)
d0  <- 0.001
dmu <- 0.001

theta.seq <- seq(0 + d0,  1 - d0,  by = d0)
mu.seq    <- seq(0 + dmu, 1 - dmu, by = dmu)

mu.prior  <- dbeta(mu.seq, 2, 2)
K         <- 5

hier.posterior.5 <- calculate.hierarchical.posterior(cointoss10, mu.seq, theta.seq, mu.prior, K)

hier.5.plot <- qplot(x = theta.seq[Var1], y = mu.seq[Var2], z = value, data = melt(hier.posterior.5)
                    ,geom = 'contour', xlim = c(0,1), ylim = c(0,1)
                    ,xlab = expression(theta), ylab = expression(mu))

plot(hier.5.plot)
str(hier.5.plot)
str(hier.posterior.5)
melt(hier.posterior.5)
data.table(melt(hier.posterior.5))
data.table(melt(hier.posterior.5))[Var1 == 500]
qplot(Var2, value, data = data.table(melt(hier.posterior.5))[Var1 == 500], geom = 'line')
qplot(mu.prior[Var2], value, data = data.table(melt(hier.posterior.5))[Var1 == 500], geom = 'line')
mu.prior
qplot(mu.seq[Var2], value, data = data.table(melt(hier.posterior.5))[Var1 == 500], geom = 'line')
qplot(mu.seq[Var2], value, data = data.table(melt(hier.posterior.100))[Var1 == 500], geom = 'line')
cointoss10 <- readRDS("cointoss10.rds")

stan.file <- 'singlemint_singlecoin.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(y = cointoss10
                     ,N = length(cointoss10)
                      )

coin.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.stanfit <- sampling(coin.stanmodel
                        ,data      = stan.data.lst
                        ,algorithm = "NUTS"
                        ,warmup    = warmup.count
                        ,iter      = warmup.count + sample.count
                        ,chains    = chain.count
                        ,verbose   = TRUE
                         )

traceplot(coin.stanfit)

traceplot(coin.stanfit) + expand_limits(y = c(0, 1))
readRDS("~/DublinR/dublin_r_workshops/wsbdaworkshop2013/singlemint_twocoin.rds")
smtc <- readRDS("~/DublinR/dublin_r_workshops/wsbdaworkshop2013/singlemint_twocoin.rds")
smtc
melt(smtc)
smtc
melt(smtc)
smtc
t(smtc)
melt(t(smtc))
data.table(melt(t(smtc)))
data.table(melt(t(smtc)))[, .(success = sum(value), trials = .N), by = Var2]
data.table(melt(t(smtc)))
data.table(melt(t(smtc)))[Var2 == 1]
data.table(melt(t(smtc)))
data.table(melt(t(smtc)))
data.table(theta = c(0.4, 0.5, 0.55), N = 70)
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, rbinom(prob = theta), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, rbinom(N, prob = theta), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, rbinom(N, size = N, prob = theta), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, .(success = rbinom(N, size = N, prob = theta), trials = N), by = .I]
data.table(theta = c(0.4, 0.5, 0.55), N = 70)[, .(success = rbinom(N, size = N, prob = theta), trials = N), by = .I]
source("lib.R")
generate.coin.data
generate.coin.data(c(0.4, 0.5, 0.55), 50)
coindata.dt <- generate.coin.data(c(0.4, 0.5, 0.55), 50)
coindata.dt
coindata.dt
coindata.dt
source("lib.R")
coindata.dt <- generate.coin.data(c(0.4, 0.5, 0.55), 50)
coindata.dt
coindata.dt[1:2]
 saveRDS(coindata.dt[1:2], file = 'singlemint_twocoin.rds', compress = 'xz')
readRDS("singlemint_twocoin.rds")
library(knitr)
knit2pdf("wsbda201603_worksheet.Rnw")
smtc.dt <- readRDS("singlemint_twocoin.rds")
smtc.dt
smtc.dt <- readRDS("singlemint_twocoin.rds")

stan.file <- 'singlemint_singlecoin_flexible.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(n_coin = smtc.dt[, length(unique(coin.id))]
                     ,trials = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

smtc.dt <- readRDS("singlemint_twocoin.rds")

stan.file <- 'singlemint_multiplecoin.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(n_coin = smtc.dt[, length(unique(coin.id))]
                     ,trials = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

stan.data.lst <- list(n_coins = smtc.dt[, length(unique(coin.id))]
                     ,trials  = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit)
traceplot(coin.smtc.stanfit) + expand_limit(y = c(0, 1))
traceplot(coin.smtc.stanfit) + expand_limits(y = c(0, 1))
stan.data.lst <- list(n_coins = smtc.dt[, length(unique(coin.id))]
                     ,K = 5
                     ,trials  = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit) + expand_limits(y = c(0,1))

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)
coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit) + expand_limits(y = c(0,1))

#####
##### Exercise 5.6
#####

smtc.dt <- readRDS("singlemint_twocoin.rds")

stan.file <- 'singlemint_multiplecoin.stan'

warmup.count <- 250
sample.count <- 1000
chain.count  <- 8

stan.data.lst <- list(n_coins = smtc.dt[, length(unique(coin.id))]
                     ,K = 5
                     ,trials  = smtc.dt$trials
                     ,success = smtc.dt$success
                      )

coin.smtc.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.smtc.stanfit <- sampling(coin.smtc.stanmodel
                             ,data      = stan.data.lst
                             ,algorithm = "NUTS"
                             ,warmup    = warmup.count
                             ,iter      = warmup.count + sample.count
                             ,chains    = chain.count
                             ,verbose   = TRUE
                              )

traceplot(coin.smtc.stanfit) + expand_limits(y = c(0,1))

lsos()
rm9test)
rm(test)
lsos()


smtc.dt
coindata.dt
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55), 50)
coin5.dt
source("lib.R")
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55), 50)
coin5.dt
readRDS("singlemint_twocoin.rds")
rm(list = ls())
source("wsexercise.6.R")
source("wsexercise.6.R")
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 100, 10))
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 100, 10), geom = 'line')
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 10, 1), geom = 'line')
source("wsexercise.6.R")
source("wsexercise.6.R")
traceplot(coin.full.stanfit) + expand_limits(y = c(0,1))

source("wsexercise.6.R")
traceplot(coin.full.stanfit) + expand_limits(y = c(0,1))
source("wsexercise.6.R")
source("wsexercise.6.R")
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 1, 0.1), geom = 'line')
qplot(seq(0, 100, by = 0.1), dgamma(seq(0, 100, by = 0.1), 1.1, 0.11), geom = 'line')
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                              ,c(50, 100, 75, 100, 150))

coin5.dt
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)

                              ,c(50, 100, 75, 100, 150))

coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                              ,c(50,   100,   75,  125,  150))

coin5.dt
coin5.dt
coin5.dt
coin5.dt <- generate.coin.data(c(0.4, 0.45, 0.50, 0.45, 0.55)
                              ,c(50,   100,   75,  125,  150))

stan.data.lst <- list(n_coins = coin5.dt[, length(unique(coin.id))]
                     ,trials  = coin5.dt$trials
                     ,success = coin5.dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

coin.tossvar.stanmodel <- stan_model(stan.file, verbose = TRUE)


coin.tossvar.stanfit <- sampling(coin.tossvar.stanmodel
                                ,data      = stan.data.lst
                                ,algorithm = "NUTS"
                                ,warmup    = warmup.count
                                ,iter      = warmup.count + sample.count
                                ,chains    = chain.count
                                ,verbose   = TRUE
                                 )

traceplot(coin.tossvar.stanfit) + expand_limits(y = c(0,1))

source("lib.R")
generate.hierarchical.coin.data()
generate.hierarchical.coin.data()
test.dt <- generate.hierarchical.coin.data()
test.dt
test.dt
rm(test.dt)
coin_05.dt <- generate.hierarchical.coin.data(coins = 5)
coin_50.dt <- generate.hierarchical.coin.data(coins = 50)
coin_05.dt
coin_50.dt
coin_05.dt <- generate.hierarchical.coin.data(coins = 5)
coin_50.dt <- generate.hierarchical.coin.data(coins = 50)

coin.alt.stanmodel <- stan_model(stan.file, verbose = TRUE)

stan.data.lst <- list(n_coins = coin_05.dt[, length(unique(coin.id))]
                     ,trials  = coin_05.dt$trials
                     ,success = coin_05.dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

coin.var05.stanfit <- sampling(coin.alt.stanmodel
                              ,data      = stan.data.lst
                              ,algorithm = "NUTS"
                              ,warmup    = warmup.count
                              ,iter      = warmup.count + sample.count
                              ,chains    = chain.count
                              ,verbose   = TRUE
                               )

traceplot(coin.var05.stanfit) + expand_limits(y = c(0,1))



stan.data.lst <- list(n_coins = coin_50.dt[, length(unique(coin.id))]
                     ,trials  = coin_50.dt$trials
                     ,success = coin_50.dt$success
                     ,priorShape = 10
                     ,priorRate  = 1
                      )

coin.var50.stanfit <- sampling(coin.alt.stanmodel
                              ,data      = stan.data.lst
                              ,algorithm = "NUTS"
                              ,warmup    = warmup.count
                              ,iter      = warmup.count + sample.count
                              ,chains    = chain.count
                              ,verbose   = TRUE
                               )

traceplot(coin.var50.stanfit) + expand_limits(y = c(0,1))

traceplot(coin.var50.stanfit) + expand_limits(y = c(0,1))

traceplot(coin.var05.stanfit) + expand_limits(y = c(0,1))
traceplot(coin.var05.stanfit, pars = c('mu', 'K')) + expand_limits(y = c(0,1))
q()
y
